{"version":3,"sources":["demo/image.js","demo/paragraph.js","demo/article.js","demo/contact.js","demo/faq.js","demo/footer.js","demo/header.js","index.js"],"names":["Image","props","demo","content","alt","this","SERVER","link","src","imageUrl","React","Component","Paragraph","Caption","Text","Title","caption","image","title","dangerouslySetInnerHTML","__html","text","Article","mode","handleClickDetail","bind","localeContent","Author","path","Intro","self","map","paragraph","idx","loadContentDetail","renderPreview","renderDefault","className","author","intro","paragraphs","imageAlt","href","onClick","e","file","Contact","contact","Email","name","Name","FirstName","kind","Kind","LastName","address","AddressChoice","Address","poiLink","PoiLink","Locality","locality","linkedContents","Mobile","Organization","Phone","Position","PostalCode","postalCode","StreetAddress","streetAddress","personContact","email","mobile","firstName","lastName","position","organization","phone","FAQ","Question","question","DemoFooter","view","state","target","DemoHeader","Demo1ContentList","demo1","locale","Object","keys","result","item","key","attributes","type","isXmlContent","Demo1ContentSelect","handleChange","event","loadContentList","value","currentType","radioList","typeList","label","checked","onChange","Demo1Detail","handleClickList","preventDefault","renderContent","isTypeArticle","isTypeContact","isTypeFaq","Demo1List","Demo1LocaleSelect","currentLocale","localeList","Demo1","contextPath","document","getElementById","dataset","process","API_ENDPOINT","CONTENT_FOLDER","PARAMS","TYPE_ARTICLE","TYPE_CONTACT","TYPE_FAQ","localeParam","url","fetch","then","reponse","json","setState","response","ReactDOM","render"],"mappings":"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","file":"static/js/main.ae9e1e82.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * Class representing an image content. Image is a nested content\n * used by higher-order contents or by other nested contents such as Paragraph.\n * @see {@link http://localhost/system/modules/alkacon.mercury.template/schemas/nested/image.xsd}\n */\nclass Image extends React.Component {\n\n  /**\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    this.demo = props.demo;\n    this.content = props.content;\n    this.alt = props.alt;\n  }\n\n  /**\n   * Returns the URL of this image.\n   */\n  get imageUrl() {\n    return this.demo.SERVER + this.content.Image.link;\n  }\n\n  /**\n   * Renders this component.\n   */\n  render() {\n    if (!this.content) {\n      return false;\n    }\n    return (\n      <img src={this.imageUrl} alt={this.alt}/>\n    )\n  }\n}\n\nexport default Image;\n","import React from 'react';\nimport Image from './image';\n\n/**\n * Class representing a paragraph content. Paragraph is a nested content\n * used by higher-order contents such as FAQ and article.\n * @see {@link http://localhost/system/modules/alkacon.mercury.template/schemas/nested/paragraph.xsd}\n */\nclass Paragraph extends React.Component {\n\n  /**\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    this.demo = props.demo;\n    this.content = props.content;\n  }\n\n  /**\n   * Returns the caption of this paragraph.\n   */\n  get caption() {\n    return this.content.Caption;\n  }\n\n  /**\n   * Returns the image of this paragraph.\n   */\n  get image() {\n    return this.content.Image;\n  }\n\n  /**\n   * Returns the text of this paragraph.\n   */\n  get text() {\n    return this.content.Text;\n  }\n\n  /**\n   * Returns the title of this FAQ content.\n   * For simplicity we ignore all FAQ paragraphs besides the first one.\n   */\n  get title() {\n    return this.content.Title;\n  }\n\n  /**\n   * Renders this component.\n   */\n  render() {\n    return (\n      <div>\n        <h4>{this.caption}</h4>\n        <Image demo={this.demo} content={this.image} alt={this.title}/>\n        <div dangerouslySetInnerHTML={{__html: this.text}} />\n      </div>\n    )\n  }\n}\n\nexport default Paragraph;\n","import React from 'react';\nimport Image from './image';\nimport Paragraph from './paragraph';\n\n/**\n * Class representing an article content.\n * @see {@link http://localhost/system/modules/alkacon.mercury.template/schemas/article.xsd}\n */\nclass Article extends React.Component {\n\n  /**\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    this.demo = props.demo;\n    this.content = props.content;\n    this.mode = props.mode;\n    this.handleClickDetail = this.handleClickDetail.bind(this);\n  }\n\n  /**\n   * Returns the author of this article;\n   */\n  get author() {\n    return this.localeContent.Author;\n  }\n\n  /**\n   * Returns the content path of this article.\n   */\n  get file() {\n    return this.content.path;\n  }\n\n  /**\n   * Returns the introduction of this article.\n   */\n  get intro() {\n    return this.localeContent.Intro;\n  }\n\n  /**\n   * Returns the localized content. Depending on whether request parameter\n   * wrapper was set to true or false, the localized content is either\n   * contained in this.content.localeContent (true) or in this.content (false);\n   */\n  get localeContent() {\n    return this.content.localeContent ? this.content.localeContent :\n        this.content;\n  }\n\n  /**\n   * Returns the paragraphs of this article content.\n   */\n  get paragraphs() {\n    if (!this.localeContent.Paragraph) {\n      return false;\n    }\n    const self = this;\n    const paragraphs = this.localeContent.Paragraph.map(\n        function(paragraph, idx) {\n      return (\n        <Paragraph demo={self.demo} content={paragraph} key={idx}/>\n      )\n    });\n    return paragraphs;\n  }\n\n  /**\n   * Returns the title of this article.\n   */\n  get title() {\n    return this.localeContent.Title;\n  }\n\n  /**\n   * Handler. Called when clicking on the read more link.\n   */\n  handleClickDetail(content) {\n    this.demo.loadContentDetail(content);\n  }\n\n  /**\n   * Renders this component.\n   */\n  render() {\n    if (this.mode === 'preview') {\n      return this.renderPreview();\n    }\n    return this.renderDefault();\n  }\n\n  /**\n   * Renders a detail view of this article.\n   */\n  renderDefault() {\n    return (\n      <section className=\"detail\">\n        <h3>{this.title}</h3>\n        <h4>by {this.author}</h4>\n        <h4>{this.intro}</h4>\n        {this.paragraphs}\n      </section>\n    );\n  }\n\n  /**\n   * Renders an article preview to be used in a list view.\n   */\n  renderPreview() {\n    const image = this.localeContent.Paragraph ?\n        this.localeContent.Paragraph[0].Image : null;\n    const imageAlt = this.title;\n    return (\n      <div className=\"list\">\n        <Image demo={this.demo} content={image} alt={imageAlt}/>\n        <div>\n          <small>m-article</small>\n          <h3>{this.title}</h3>\n          <a href=\"#\" onClick={(e) => this.handleClickDetail(this.file, e)}>Read more</a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Article;\n","import React from 'react';\nimport Image from './image'\n\n/**\n * Class representing a contact content.\n * @see {@link http://localhost/system/modules/alkacon.mercury.template/schemas/contact.xsd}\n */\nclass Contact extends React.Component {\n\n  /**\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    this.demo = props.demo;\n    this.content = props.content;\n    this.mode = props.mode;\n    this.handleClickDetail = this.handleClickDetail.bind(this);\n  }\n\n  /**\n   * Returns the email of this contact.\n   */\n  get email() {\n    let contact = this.localeContent.Contact;\n    if (contact && contact.Email) {\n      return contact.Email.Email;\n    }\n    return false;\n  }\n\n  /**\n   * Returns the content path of this contact.\n   */\n  get file() {\n    return this.content.path;\n  }\n\n  /**\n   * Returns the first name of this contact.\n   */\n  get firstName() {\n    const name = this.localeContent.Name;\n    if (name) {\n      return name.FirstName;\n    }\n    return false;\n  }\n\n  get image() {\n    return this.localeContent.Image;\n  }\n\n  /**\n   * Returns the kind of this contact.\n   */\n  get kind() {\n    const kind = this.content.localeContent.Kind;\n    return kind ? kind : false;\n  }\n\n  /**\n   * Returns the last name of this contact.\n   */\n  get lastName() {\n    const name = this.localeContent.Name;\n    if (name) {\n      return name.LastName;\n    }\n    return false;\n  }\n\n  /**\n   * Returns the localized content. Depending on whether request parameter\n   * wrapper was set to true or false, the localized content is either\n   * contained in this.content.localeContent (true) or in this.content (false);\n   */\n  get localeContent() {\n    return this.content.localeContent ? this.content.localeContent :\n        this.content;\n  }\n\n  /**\n   * Returns the locality of this contact.\n   */\n  get locality() {\n    const contact = this.localeContent.Contact;\n    const address = contact.AddressChoice.Address;\n    const poiLink = contact.AddressChoice.PoiLink;\n    if (address) { // nested address?\n      return address.Locality;\n    } else if (poiLink) { // linked content?\n      const path = poiLink.path;\n      const linkedContent = this.content.linkedContents[path];\n      const address = linkedContent.localeContent.Address;\n      const locality = address.Locality;\n      if (locality) {\n        return locality;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns the mobile phone number of this contact.\n   */\n  get mobile() {\n    const contact = this.localeContent.Contact;\n    if (contact) {\n      return contact.Mobile;\n    }\n    return false;\n  }\n\n  /**\n   * Returns the organization name of this contact.\n   */\n  get organization() {\n    const organization = this.localeContent.Organization;\n    return organization;\n  }\n\n  /**\n   * Returns the phone of this contact.\n   */\n  get phone() {\n    const contact = this.localeContent.Contact;\n    if (contact) {\n      return contact.Phone;\n    }\n    return false;\n  }\n\n  /**\n   * Returns the position of this contact.\n   */\n  get position() {\n    const position = this.localeContent.Position;\n    return position;\n  }\n\n  /**\n   * Returns the postal code of this contact.\n   */\n  get postalCode() {\n    const contact = this.localeContent.Contact;\n    const address = contact.AddressChoice.Address;\n    const poiLink = contact.AddressChoice.PoiLink;\n    if (address) { // nested address?\n      return address.PostalCode;\n    } else if (poiLink) { // linked content?\n      const path = poiLink.path;\n      const linkedContent = this.content.linkedContents[path];\n      const address = linkedContent.localeContent.Address;\n      const postalCode = address.PostalCode;\n      if (postalCode) {\n        return postalCode;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns the street address of this contact.\n   */\n  get streetAddress() {\n    const contact = this.localeContent.Contact;\n    const address = contact.AddressChoice.Address;\n    const poiLink = contact.AddressChoice.PoiLink;\n    if (address) { // nested address?\n      return address.StreetAddress;\n    } else if (poiLink) { // linked content?\n      const path = poiLink.path;\n      const linkedContent = this.content.linkedContents[path];\n      const address = linkedContent.localeContent.Address;\n      const streetAddress = address.StreetAddress;\n      if (streetAddress) {\n        return streetAddress;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Handler. Called when clicking on the read more link.\n   */\n  handleClickDetail(content) {\n    this.demo.loadContentDetail(content);\n  }\n\n  /**\n   * Renders this component.\n   */\n  render() {\n    if (this.mode === 'preview') {\n      return this.renderPreview();\n    } else {\n      return this.renderDefault();\n    }\n  }\n\n  /**\n   * Renders a detail view of this contact.\n   */\n  renderDefault() {\n    const personContact = this.kind === 'person' ? (\n      <>\n        <h4>Email: <a href={'email:' + this.email}>{this.email}</a></h4>\n        <h4>Mobile: {this.mobile}</h4>\n      </>\n    ) : false;\n    return (\n      <section className=\"detail\">\n        <h3>{this.firstName} {this.lastName} <small>{this.position}</small></h3>\n        <h4><strong>{this.organization}</strong></h4>\n        <h4>{this.streetAddress}</h4>\n        <h4>{this.postalCode} {this.locality}</h4>\n        <Image demo={this.demo} content={this.image}\n            alt={this.firstName + ' ' + this.lastName + ', ' + this.position}/>\n        {personContact}\n        <h4>Phone: {this.phone}</h4>\n      </section>\n    )\n\n  }\n\n  /**\n   * Renders a contact preview to be used in a list view.\n   */\n  renderPreview() {\n    const title = this.kind === 'person' ?\n        this.firstName + ' ' + this.lastName : this.organization;\n    return (\n      <div className=\"list\">\n        <Image demo={this.demo} content={this.image} alt={title}/>\n        <div>\n          <small>m-contact</small>\n          <h3>{title}</h3>\n          <a href=\"#\" onClick={(e) => this.handleClickDetail(this.file, e)}>Read more</a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Contact;\n","import React from 'react';\nimport Image from './image';\nimport Paragraph from './paragraph';\n\n/**\n * Class representing a FAQ content.\n * @see {@link http://localhost/system/modules/alkacon.mercury.template/schemas/faq.xsd}\n */\nclass FAQ extends React.Component {\n\n  /**\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    this.demo = props.demo;\n    this.content = props.content;\n    this.mode = props.mode;\n    this.handleClickDetail = this.handleClickDetail.bind(this);\n  }\n\n  /**\n   * Returns the content path of this FAQ.\n   */\n  get file() {\n    return this.content.path;\n  }\n\n  /**\n   * Returns the localized content. Depending on whether request parameter\n   * wrapper was set to true or false, the localized content is either\n   * contained in this.content.localeContent (true) or in this.content (false);\n   */\n  get localeContent() {\n    return this.content.localeContent ? this.content.localeContent :\n        this.content;\n  }\n\n  /**\n   * Returns the question of this FAQ content.\n   */\n  get question() {\n    return this.localeContent.Question;\n  }\n\n  /**\n   * Returns the paragraphs of this FAQ content.\n   */\n  get paragraphs() {\n    if (!this.localeContent.Paragraph) {\n      return false;\n    }\n    const self = this;\n    const paragraphs = this.localeContent.Paragraph.map(\n        function(paragraph, idx) {\n      return (\n        <Paragraph demo={self.demo} content={paragraph} key={idx}/>\n      )\n    });\n    return paragraphs;\n  }\n\n  /**\n   * Handler. Called when clicking on the read more link.\n   */\n  handleClickDetail(content) {\n    this.demo.loadContentDetail(content);\n  }\n\n  /**\n   * Renders this component.\n   */\n  render() {\n    if (this.mode === 'preview') {\n      return this.renderPreview();\n    } else {\n      return this.renderDefault();\n    }\n  }\n\n  /**\n   * Renders a detail view of this FAQ.\n   */\n  renderDefault() {\n    return (\n      <section className=\"detail\">\n        <h3>{this.question}</h3>\n        {this.paragraphs}\n      </section>\n    )\n  }\n\n  /**\n   * Renders a FAQ preview to be used in a list view.\n   */\n  renderPreview() {\n    const image = this.localeContent.Paragraph ?\n        this.localeContent.Paragraph[0].Image : null;\n    const imageAlt = this.question;\n    return (\n      <div className=\"list\">\n        <Image demo={this.demo} content={image} alt={imageAlt}/>\n        <div>\n          <small>m-faq</small>\n          <h3>{this.question}</h3>\n          <a href=\"#\" onClick={(e) => this.handleClickDetail(this.file, e)}>Read more</a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default FAQ;\n","import React from 'react';\n\nclass DemoFooter extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.view = props.view;\n    this.state = props.state;\n  }\n\n  render() {\n    return (\n      <footer>\n        <div>\n          <h4>Demo using the OpenCms JSON API.</h4>\n          <div className=\"flex column\">\n            <a href=\"https://documentation.opencms.org/opencms-documentation/more-opencms-features/json-api/\"\n               target=\"_blank\"\n               className=\"doc\">Read the API Documentation</a>\n            <a href=\"https://github.com/alkacon/mercury-json\"\n               target=\"_blank\"\n               className=\"github\">View the Demo Source on GitHub</a>\n          </div>\n        </div>\n      </footer>\n    )\n  }\n}\n\nexport default DemoFooter;\n","import React from 'react';\n\nclass DemoHeader extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.title = props.title;\n  }\n\n  render() {\n    return (\n      <header>\n        <h1>{this.title}</h1>\n        <h4>\n          <span>A demo single page application using </span>\n          <a href=\"#\">OpenCms</a>.\n        </h4>\n      </header>\n    )\n  }\n}\n\nexport default DemoHeader;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Article from './demo/article';\nimport Contact from './demo/contact';\nimport FAQ from './demo/faq';\nimport DemoFooter from './demo/footer';\nimport DemoHeader from './demo/header';\nimport './index.css';\n\n/**\n * Class rendering the contents of a folder.\n */\nclass Demo1ContentList extends React.Component {\n\n  /**,\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    this.demo1 = props.demo1;\n  }\n\n  /**\n   * Renders this component.\n   */\n  render() {\n    let self = this;\n    // iterate the folder listing\n    const locale = this.demo1.state.locale;\n    const list = Object.keys(this.demo1.state.result).map(file => {\n      const item = self.demo1.state.result[file];\n      const type = item.attributes.type;\n      const key = file + locale;\n      if (!item.isXmlContent) { // not a content file?\n        return false;\n      }\n      if (item.attributes.type === 'm-article') {\n        return (\n          <Article demo={this.demo1} content={item} key={key} mode=\"preview\"/>\n        )\n      } else if (item.attributes.type === 'm-contact') {\n        return (\n          <Contact demo={this.demo1} content={item}  key={key} mode=\"preview\"/>\n        )\n      } else if (item.attributes.type === 'm-faq') {\n        return (\n          <FAQ demo={this.demo1} content={item}  key={key} mode=\"preview\"/>\n        )\n      } else {\n        return (\n          <div>Unknown content type.</div>\n        )\n      }\n    });\n    return list;\n  }\n}\n\n/**\n * Class representing an interactive component for content type selection.\n */\nclass Demo1ContentSelect extends React.Component {\n\n  /**\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.demo1 = props.demo1;\n  }\n\n  /**\n   * Handler. Called when a content type is selected.\n   */\n  handleChange(event) {\n    this.demo1.loadContentList(event.target.value);\n  }\n\n  /**\n   * Renders this component.\n   */\n  render() {\n    const self = this;\n    const currentType = this.demo1.state.type;\n    const radioList = this.demo1.typeList.map((type) =>\n      <label className=\"radio\" key={type}>{self.demo1.label[type]}\n        <input type=\"radio\" name=\"content\" value={type}\n               checked={currentType === type}\n               onChange={this.handleChange}/>\n        <span className=\"checkmark\"></span>\n      </label>\n    );\n    return (\n      <div>\n        <h4>Content type</h4>\n        {radioList}\n      </div>\n    );\n  }\n}\n\n/**\n * Class representing the demo 1 detail view component.\n */\nclass Demo1Detail extends React.Component {\n\n  /**\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    this.handleClickList = this.handleClickList.bind(this);\n    this.demo1 = props.demo1;\n  }\n\n  /**\n   * Handler. Called when the back-link is clicked.\n   */\n  handleClickList(event) {\n    event.preventDefault();\n    this.demo1.loadContentList(this.demo1.state.type);\n  }\n\n  /**\n   * Renders this component.\n   */\n  render() {\n    return (\n      <>\n        <h3 className=\"back\">\n          <a href=\"#\" onClick={this.handleClickList}>Back</a>\n        </h3>\n        {this.renderContent()}\n      </>\n    );\n  }\n\n  /**\n   * Renders a detail view depending on which content type is loaded.\n   */\n  renderContent() {\n    if (this.demo1.isTypeArticle()) {\n      return (\n        <Article demo={this.demo1} content={this.demo1.state.result}/>\n      )\n    } else if (this.demo1.isTypeContact()) {\n      return (\n        <Contact demo={this.demo1} content={this.demo1.state.result}/>\n      )\n    } else if (this.demo1.isTypeFaq()) {\n      return (\n        <FAQ demo={this.demo1} content={this.demo1.state.result}/>\n      )\n    } else {\n      return (<div>Unknown content type.</div>);\n    }\n  }\n}\n\n/**\n * Class representing the demo 1 list view component.\n */\nclass Demo1List extends React.Component {\n\n  /**\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    this.demo1 = props.demo1;\n  }\n\n  /**\n   * Renders this component.\n   */\n  render() {\n    return (\n      <>\n        <section className=\"select\">\n          <Demo1ContentSelect demo1={this.demo1}/>\n          <Demo1LocaleSelect demo1={this.demo1}/>\n        </section>\n        <section className=\"content\">\n          <Demo1ContentList demo1={this.demo1}/>\n        </section>\n      </>\n    );\n  }\n}\n\n/**\n * Class representing an interactive component for locale selection.\n */\nclass Demo1LocaleSelect extends React.Component {\n\n  /**\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.demo1 = props.demo1;\n  }\n\n  /**\n   * Handler. Called when a locale is selected.\n   */\n  handleChange(event) {\n    this.demo1.loadContentList(this.demo1.state.type, event.target.value);\n  }\n\n  /**\n   * Renders this component.\n   */\n  render() {\n    const currentLocale = this.demo1.state.locale;\n    const radioList = this.demo1.localeList.map((locale) =>\n      <label className=\"radio\" key={locale}>{locale}\n        <input type=\"radio\" name=\"locale\" value={locale}\n               checked={currentLocale === locale}\n               onChange={this.handleChange}/>\n        <span className=\"checkmark\"></span>\n      </label>\n    );\n    return (\n      <div>\n        <h4>Locale</h4>\n        {radioList}\n      </div>\n    );\n  }\n}\n\n/**\n * Class representing the demo 1 application.\n */\nclass Demo1 extends React.Component {\n\n  /**\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    const contextPath = document.getElementById('root').dataset.contextPath;\n    /** The server URL. */\n    this.SERVER = contextPath === '${pageContext.request.contextPath}' ?\n        process.env.REACT_APP_OPENCMS_SERVER : contextPath;\n    /** The API endpoint. */\n    this.API_ENDPOINT = this.SERVER + '/json';\n    /** The content folder. */\n    this.CONTENT_FOLDER = this.API_ENDPOINT +\n        '/sites/default/mercury-demo/.content/';\n    /** The request parameters. */\n    this.PARAMS = '?content' + // embed contents in the folder listing\n        '&wrapper'; // request the resource wrapper to get a title property\n    /** The article content type. */\n    this.TYPE_ARTICLE = 'article-m';\n    /** The article content type. */\n    this.TYPE_CONTACT = 'contact-m';\n    /** The faq content type. */\n    this.TYPE_FAQ = 'faq-m';\n    /** The list of content types. */\n    this.typeList = [this.TYPE_ARTICLE, this.TYPE_CONTACT, this.TYPE_FAQ];\n    /** Labels for the content types. */\n    this.label = {\n      'article-m': 'Article',\n      'contact-m': 'Contact',\n      'faq-m': 'FAQ'\n    };\n    /** The list of locales. */\n    this.localeList = ['en', 'de'];\n    /** The state of this React application. */\n    this.state = {\n      type: this.TYPE_ARTICLE,\n      content: null,\n      result: {},\n      locale: 'en'\n    };\n  }\n\n  /**\n   * Load the list when the component did mount.\n   */\n  componentDidMount() {\n    this.loadContentList(this.state.type);\n  }\n\n  /**\n   * Loads the data for the detail view.\n   */\n  loadContentDetail(path, locale) {\n    const self = this;\n    if (!locale) {\n      locale = this.state.locale;\n    }\n    const localeParam = '&locale=' + locale + '&fallbackLocale';\n    const url = this.API_ENDPOINT + path + this.PARAMS + localeParam;\n    fetch(url)\n      .then(reponse => reponse.json())\n      .then((result) => {\n        self.setState({\n          type: self.state.type,\n          content: path,\n          result: result,\n          locale: locale\n        });\n      });\n  }\n\n  /**\n   * Loads the data for the list view.\n   */\n  loadContentList(type, locale) {\n    const self = this;\n    if (!locale) {\n      locale = this.state.locale;\n    }\n    const localeParam = '&locale=' + locale + '&fallbackLocale';\n    const url = this.CONTENT_FOLDER + type + this.PARAMS + localeParam;;\n    fetch(url)\n      .then(response => response.json())\n      .then((result) => {\n        self.setState({\n          type: type,\n          content: null,\n          result: result,\n          locale: locale\n        });\n      });\n  }\n\n  /**\n   * Returns whether the loaded content is an article content.\n   */\n  isTypeArticle() {\n    return this.state.type === this.TYPE_ARTICLE;\n  }\n\n  /**\n   * Returns whether the loaded content is a contact content.\n   */\n  isTypeContact() {\n    return this.state.type === this.TYPE_CONTACT;\n  }\n\n  /**\n   * Returns whether the loaded content is a FAQ content.\n   */\n  isTypeFaq() {\n    return this.state.type === this.TYPE_FAQ;\n  }\n\n  /**\n   * Renders this component.\n   */\n  render() {\n    let view = this.state.content ? (<Demo1Detail demo1={this} />) :\n        (<Demo1List demo1={this} />);\n    return (\n      <main>\n        <div className=\"container\">\n          <DemoHeader title=\"Demo 1\"/>\n          {view}\n          <DemoFooter />\n        </div>\n      </main>\n    )\n  }\n}\n\n/**\n * Render the demo 1 application.\n */\nReactDOM.render(\n  <Demo1 />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}