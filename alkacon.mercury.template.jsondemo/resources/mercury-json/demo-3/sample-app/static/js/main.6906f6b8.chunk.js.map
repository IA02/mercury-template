{"version":3,"sources":["section.js","index.js"],"names":["Section","props","demo3","content","settings","pieceLayout","this","sectionImageClass","showPieceText","sectionTextClass","showPieceImage","sectionImage","className","renderImage","sectionText","renderTitle","renderText","renderLink","image","localeContent","Image","showImage","imageTitle","Title","imageLink","link","imageSrc","SERVER","src","alt","Link","showLink","linkUri","URI","linkText","Text","href","text","showText","dangerouslySetInnerHTML","__html","title","hsize","visualOption","show","linkOption","showTitle","textOption","React","Component","Demo3","process","ENDPOINT","PARAMS","state","page","loadPage","self","url","fetch","then","response","json","setState","containers","visitContainers","type","attributes","container","elements","visitElements","map","visitContainer","name","element","formatterKey","path","linkedContents","length","endsWith","renderContent","idx","visitElement","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6906f6b8.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * Class representing a section component.\n */\nclass Section extends React.Component {\n\n  /**\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    /** The demo 3 application. */\n    this.demo3 = props.demo3;\n    /** The content to render. */\n    this.content = props.content;\n    /** The formatter settings. */\n    this.settings = props.settings;\n  }\n\n  /**\n   * Renders this component according to formatter settings.\n   */\n  render() {\n    const pieceLayout = this.settings.pieceLayout;\n    const sectionImageClass = this.showPieceText() ? 'm-section-piece-image' :\n        'm-section-piece';\n    let sectionTextClass = this.showPieceImage() ? 'm-section-piece-text' :\n        'm-section-piece';\n    if (this.showPieceImage() && pieceLayout === '6') {\n      // if both image and text piece are shown and text piece is on\n      // right we need some additional space between the image and\n      // text piece\n      sectionTextClass += ' m-section-piece-text-padding';\n    }\n    const sectionImage = (\n      <div className={sectionImageClass}>\n      {this.renderImage()}\n      </div>\n    )\n    const sectionText = (\n      <div className={sectionTextClass}>\n      {this.renderTitle()}\n      {this.renderText()}\n      {this.renderLink()}\n      </div>\n    )\n    if (pieceLayout === '6') { // image left, text right\n      return (\n        <div className=\"m-section\">\n        {this.showPieceImage() ? sectionImage : false}\n        {this.showPieceText() ? sectionText : false}\n        </div>\n      )\n    } else if (pieceLayout === '7') { // text left, image right\n      return (\n        <div className=\"m-section\">\n        {this.showPieceText() ? sectionText : false}\n        {this.showPieceImage() ? sectionImage : false}\n        </div>\n      )\n    }\n    return (\n      <div>Unknown pieceLayout setting: {pieceLayout}.</div>\n    )\n  }\n\n  /**\n   * Renders the image of this section.\n   */\n  renderImage() {\n    const image = this.content.localeContent.Image;\n    if (this.showImage() && image) {\n      const imageTitle = image.Title;\n      const imageLink = image.Image.link;\n      const imageSrc = this.demo3.SERVER + imageLink;\n      return (\n        <img src={imageSrc} alt={imageTitle}/>\n      )\n    }\n    return false;\n  }\n\n  /**\n   * Renders the link of this section.\n   */\n  renderLink() {\n    const link = this.content.localeContent.Link;\n    if (this.showLink() && link) {\n      const linkUri = '#' + link.URI.link;\n      const linkText = link.Text;\n      return (\n        <a href={linkUri}>{linkText}</a>\n      )\n    }\n    return false;\n  }\n\n  /**\n   * Renders the text of this section.\n   */\n  renderText() {\n    const text = this.content.localeContent.Text;\n    if (this.showText()) {\n      return (\n        <div dangerouslySetInnerHTML={{__html: text}}></div>\n      )\n    }\n    return false;\n  }\n\n  /**\n   * Renders the title of this section.\n   */\n  renderTitle() {\n    const title = this.content.localeContent.Title;\n    const hsize = this.settings.hsize;\n    if (hsize === '1') {\n      return (\n        <h1>{title}</h1>\n      )\n    } else if (hsize === '2') {\n      return (\n        <h2>{title}</h2>\n      )\n    } else if (hsize === '3') {\n      return (\n        <h3>{title}</h3>\n      )\n    } else if (hsize === '4') {\n      return (\n        <h4>{title}</h4>\n      )\n    } else if (hsize === '0') {\n      return false;\n    }\n    return (\n      <h2>Title</h2>\n    )\n  }\n\n  /**\n   * Whether to show the image of this section according to the settings.\n   */\n  showImage() {\n    const visualOption = this.settings.visualOption;\n    let show = true;\n    if (visualOption === '99') {\n      show = true;\n    } else if (visualOption === '0') {\n      show = false;\n    }\n    return show;\n  }\n\n  /**\n   * Whether to show the link of this section according to the settings.\n   */\n  showLink() {\n    const linkOption = this.settings.linkOption;\n    let show = true;\n    if (linkOption === 'button') {\n      show = true;\n    } else if (linkOption === 'none') {\n      show = false;\n    }\n    return show;\n  }\n\n  /**\n   * Whether to show the image piece of this section. Same as showImage().\n   */\n  showPieceImage() {\n    return this.showImage();\n  }\n\n  /**\n   * Whether to show the text piece of this section. True\n   * if either the text, the title, or the link is shown.\n   */\n  showPieceText() {\n    return this.showLink() || this.showText() || this.showTitle();\n  }\n\n  /**\n   * Whether to show the text of this section according to the settings.\n   */\n  showText() {\n    const textOption = this.settings.textOption;\n    let show = true;\n    if (textOption === 'default') {\n      show = true;\n    } else if (textOption === 'none') {\n      show = false;\n    }\n    return show;\n  }\n\n  /**\n   * Whether to show the title of this section according to the settings.\n   */\n  showTitle() {\n    const hsize = this.settings.hsize;\n    return hsize !== '0';\n  }\n}\n\nexport default Section;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Section from './section'\nimport './index.css';\n\n/**\n * Class representing the demo 3 component.\n */\nclass Demo3 extends React.Component {\n\n  /**\n   * Creates a new component.\n   */\n  constructor(props) {\n    super(props);\n    /** The server URL. */\n    this.SERVER =  process.env.REACT_APP_OPENCMS_SERVER;\n    /** The JSON endpoint. */\n    this.ENDPOINT = this.SERVER + '/json';\n    /** The URI of the page we will render. */\n    this.URI = '/sites/default/mercury-json/demo-3/sample-page/index.html';\n    /** The request parameters. */\n    this.PARAMS = '?content&wrapper&locale=en&fallbackLocale';\n    /** The state of this component. */\n    this.state = {\n      page: null\n    }\n  }\n\n  /**\n   * Handler. Called when this component did mount.\n   */\n  componentDidMount() {\n    this.loadPage();\n  }\n\n  /**\n   * Loads the page.\n   */\n  loadPage() {\n    const self = this;\n    const url = this.ENDPOINT + this.URI + this.PARAMS;\n    fetch(url)\n      .then(response => response.json())\n      .then((page) => {\n        self.setState({\n          page: page\n        });\n      });\n  }\n\n  /**\n   * Renders this component.\n   */\n  render() {\n    if (!this.state.page) {\n      return false;\n    }\n    const containers = this.state.page.containers;\n    return (\n      <>\n        <h1>JSON API Demo 3</h1>\n        {this.visitContainers(containers)}\n      </>\n    )\n  }\n\n  /**\n   * Renders a content.\n   */\n  renderContent(content, settings) {\n    const type = content.attributes.type;\n    if (type === 'm-section') {\n      return (\n        <Section demo3={this} content={content} settings={settings}/>\n      )\n    } else {\n      return (\n        <div>Content type {type} is not supported.</div>\n      )\n    }\n  }\n\n  /**\n   * Visits a container.\n   */\n  visitContainer(container) {\n    const elements = container.elements;\n    return this.visitElements(elements);\n  }\n\n  /**\n   * Visit all containers of a page or an element.\n   */\n  visitContainers(containers) {\n    const self = this;\n    const html = containers.map(container => {\n      return (\n        <div key={container.name}>{self.visitContainer(container)}</div>\n      )\n    });\n    return html;\n  }\n\n  /**\n   * Visits an element. If the element has containers, visit them.\n   * If the element has no containers, render the content.\n   */\n  visitElement(element) {\n    const containers = element.containers;\n    const formatterKey = element.formatterKey;\n    const path = element.path;\n    const content = this.state.page.linkedContents[path];\n    const settings = element.settings;\n    if (containers.length) {\n      return this.visitContainers(containers);\n    } else if (formatterKey && formatterKey.endsWith('/json')) {\n      return this.renderContent(content, settings);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Visit all elements of a container.\n   */\n  visitElements(elements) {\n    const self = this;\n    const html = elements.map((element, idx) => {\n      return (\n        <div key={element.path + idx}>{self.visitElement(element)}</div>\n      )\n    });\n    return html;\n  }\n}\n\n/**\n * Render the demo 3 application.\n */\nReactDOM.render(\n  <Demo3/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}