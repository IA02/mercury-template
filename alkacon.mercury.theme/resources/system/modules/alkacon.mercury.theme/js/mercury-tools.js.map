{"version":3,"sources":["webpack:///./template-src/js/parallax.js","webpack:///./template-src/js/csssampler.js"],"names":["jQ","DEBUG","m_$parallaxElements","update","scrollTop","Mercury","windowScrollTop","each","$element","this","css","offset","gridInfo","isMinMd","elementTop","top","elementHeight","outerHeight","elementBottom","elementScrollTop","elementScrollBottom","windowHeight","effectType","data","effect","console","info","elementBottomOffset","Math","round","abs","initParallax","jQuery","debug","length","device","desktop","window","on","resize","__webpack_require__","r","__webpack_exports__","d","replaceAll","template","key","value","split","join","getContrastBg","hexcolor","substr","yiq","parseInt","e","initCssSampler","$sampleElements","i","html","empty","attr","getCssJsonData","j","obj","name","append"],"mappings":"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","file":"mercury-tools.js","sourcesContent":["/*\n * This program is part of the OpenCms Mercury Template.\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// the global objects that must be passed to this module\nvar jQ;\nvar DEBUG;\n\n\"use strict\";\n\nvar m_$parallaxElements;\n\n// function to be called whenever the window is scrolled or resized\nfunction update(){\n    var scrollTop = Mercury.windowScrollTop();\n\n    m_$parallaxElements.each(function(){\n        var $element = jQ(this);\n\n        var backgroundImage = $element.css(\"background-image\");\n        if (backgroundImage == 'none') {\n            return;\n        }\n\n        var offset = 0;\n\n        // only apply effect on screen size lager then \"sm\", i.e. \"md\" and \"lg\"\n        if (Mercury.gridInfo().isMinMd()) {\n\n            var elementTop = $element.offset().top;\n            var elementHeight = $element.outerHeight(true);\n            var elementBottom = elementTop + elementHeight;\n            var elementScrollTop = elementTop - scrollTop;\n            var elementScrollBottom = elementBottom - scrollTop;\n            var windowHeight = Mercury.windowHeight();\n\n            var effectType = $element.data(\"parallax\").effect;\n\n            // Check if element is to small for parallax effect\n            if (elementHeight <= 1) {\n                return;\n            }\n\n            // Check if element is visible, if not just return\n            if (elementScrollBottom < 0 || elementScrollTop > windowHeight) {\n                return;\n            }\n\n            if (DEBUG) console.info(\"elementTop: \" + elementTop + \" elementBottom: \" + elementBottom);\n            if (DEBUG) console.info(\"elementScrollTop: \" + elementScrollTop + \" elementScrollBottom: \" + elementScrollBottom);\n\n            if (effectType == 1) {\n                // This effect assumes there is a full size background image.\n                // The background is slightly shifted up while the bottom of the\n                // element is not in view. Once the bottom is in view,\n                // or the screen top is reached, the shift effect stops.\n                var elementBottomOffset = 0;\n\n                if (elementHeight <= windowHeight) {\n                    elementBottomOffset = elementScrollBottom - windowHeight;\n                } else {\n                    elementBottomOffset = elementScrollTop;\n                }\n\n                if (elementBottomOffset > 0) {\n                    // The bottom is not in view\n                    offset = Math.round(Math.abs(elementBottomOffset) * 0.5);\n\n                    if (DEBUG) console.info(\n                        \"elementHeight: \" +  elementHeight +\n                        \" windowHeight: \" + windowHeight +\n                        \" offset: \" + offset +\n                        \" elementScrollTop: \" + elementScrollTop);\n\n                }\n            } else if (effectType == 2) {\n                // Initially developed for the blog visual.\n                // This effect assumes there is a full size background image\n                // near the screen top (directly under the main navigation).\n                // The image should have standard 'photo' 4:3 or 3:2 format.\n                // Initially only the upper part of the image is seen (about 400px).\n                // When scolling, the image starts shiftig up faster then the scroll\n                // and reveals the lower part originally hidden.\n\n                if (elementScrollTop < 0) {\n                     offset = Math.round(elementScrollTop * 2);\n                }\n            } else if (effectType == 3) {\n                // Also developed for the blog visual.\n                // This effect assumes there is a full size background image\n                // near the screen top (directly under the main navigation).\n                // The image should have standard 'photo' 4:3 or 3:2 format.\n                // When scolling, the image starts shiftig very slow\n                // and reveals some of the lower part originally hidden.\n\n                offset = Math.round(elementScrollTop * 0.33);\n            }\n        }\n        $element.css('background-position', \"50% \" + offset + \"px\");\n    });\n}\n\nfunction initParallaxInt() {\n\n    // initialize parallax sections with values from data attributes\n    m_$parallaxElements.each(function(){\n\n        var $element = jQ(this);\n        var effectType = 1;\n\n        // the following data attribute can to be attached to the div\n        // <div class=\"effect-parallax-bg\" data-prallax='{\"effect\":1}' >\n        if (typeof $element.data(\"parallax\") != 'undefined') {\n            if (typeof $element.data(\"parallax\").effect != 'undefined') {\n                effectType = $element.data(\"parallax\").effect;\n            }\n        }\n        $element.data(\"parallax\", { effect: effectType } );\n    });\n}\n\n/****** Exported functions ******/\n\nexport function initParallax(jQuery, debug) {\n\n    jQ = jQuery;\n    DEBUG = debug;\n\n    m_$parallaxElements = jQuery('.effect-parallax-bg');\n    if (DEBUG) {\n        console.info(\"Parallax.init()\");\n        console.info(\".effect-parallax-bg elements found: \" + m_$parallaxElements.length);\n    }\n\n    if (m_$parallaxElements.length > 0) {\n        if (Mercury.device().desktop()) {\n            initParallaxInt();\n            jQ(window).on('scroll', update).resize(update);\n            update();\n        }\n    }\n}\n","/*\n * This program is part of the OpenCms Mercury Template.\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// the global objects that must be passed to this module\nvar jQ;\nvar DEBUG;\n\n\"use strict\";\n\nfunction replaceAll(template, key, value) {\n\n    return template.split(\"$(\" + key + \")\").join(value);\n}\n\nfunction getContrastBg(hexcolor){\n\n        try {\n            hexcolor = hexcolor.substr(1);\n            if (hexcolor.length < 6) {\n                hexcolor = hexcolor + hexcolor;\n            }\n            var r = parseInt(hexcolor.substr(0,2),16);\n            var g = parseInt(hexcolor.substr(2,2),16);\n            var b = parseInt(hexcolor.substr(4,2),16);\n            var yiq = ((r*299)+(g*587)+(b*114))/1000;\n            if (DEBUG) console.info(\"getContrastBg(#\" + hexcolor + \") result: \" + yiq);\n            return (yiq >= 220) ? 'box box-grey' : 'box box-white';\n        } catch (e) {\n            return 'p-20';\n        }\n}\n\n/****** Exported functions ******/\n\nexport function initCssSampler(jQuery, debug) {\n\n    jQ = jQuery;\n    DEBUG = debug;\n\n    if (DEBUG) console.info(\"CssSampler.init()\");\n\n    var $sampleElements = jQ(\".template-info.sample\");\n    if (DEBUG) console.info(\".template-info.sample elements found: \" + $sampleElements.length);\n\n    for (var i = 0; i < $sampleElements.length; i++) {\n        var $element = jQ($sampleElements[i]);\n        var template = $element.html();\n        $element.empty();\n\n        if (DEBUG) console.info(\"Creating CSS sample for id: \" + $element.attr('id'));\n        var data = Mercury.getCssJsonData($element.attr('id'));\n\n        for (var j = data.length-1; j>=0; j--) {\n\n            var obj = data[j];\n            if (obj.name) {\n                var html = template;\n                html = replaceAll(html, \"name\", obj.name);\n                html = replaceAll(html, \"value\", obj.value);\n                html = replaceAll(html, \"background\", getContrastBg(obj.value));\n                $element.append(jQ(html));\n            }\n        }\n    }\n}\n\n"],"sourceRoot":""}