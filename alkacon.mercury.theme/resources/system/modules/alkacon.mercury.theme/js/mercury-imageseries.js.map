{"version":3,"file":"mercury-imageseries.js","mappings":"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","sources":["webpack://mercury-template/./node_modules/photoswipe/dist/photoswipe.esm.js","webpack://mercury-template/./template-src/js/imageseries.js"],"sourcesContent":["/*!\n  * PhotoSwipe 5.3.0 - https://photoswipe.com\n  * (c) 2022 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nfunction roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nfunction clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nfunction setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nfunction decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode();\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {HTMLElement | NodeListOf<HTMLElement> | string} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    pswp.currSlide.applyCurrentZoomPan();\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element propery was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\n\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\n\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nconst arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nconst arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nfunction getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {string=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {string=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n","/*\n * This program is part of the OpenCms Mercury Template.\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport PhotoSwipe from 'photoswipe';\n\n// the global objects that must be passed to this module\nvar jQ;\nvar DEBUG;\n\n\"use strict\";\n\n// all auto loading image galleries as array for easy iteration\nvar m_autoLoadSeries = [];\n\n// all image galleries that have been initialized as object\nvar m_galleries = {};\n\nfunction openPhotoSwipe(index, id) {\n\n    var options = {\n        bgOpacity: 0.9,\n        index : index,\n        showHideAnimationType: 'none'\n    };\n\n    options.dataSource = m_galleries[id].images;\n    var photoSwipe = new PhotoSwipe(options);\n\n    photoSwipe.on('uiRegister', function() {\n        photoSwipe.ui.registerElement({\n            name: 'caption',\n            order: 9,\n            isButton: false,\n            appendTo: 'root',\n            onInit: (el, pswp) => {\n                photoSwipe.on('change', () => {\n                    const currSlideData = photoSwipe.currSlide.data;\n                    el.innerHTML = '<div class=\"caption-wrapper\">' + currSlideData.title + '</div>';\n                });\n            }\n        });\n    });\n\n    photoSwipe.init();\n}\n\nfunction handleAutoLoaders() {\n    if (m_autoLoadSeries != null) {\n        for (var i=0; i<m_autoLoadSeries.length; i++) {\n            var imageSeries = m_autoLoadSeries[i];\n            // NOTE: jQuery.visible() is defined in jquery-extensions.js\n            if (!imageSeries.loaded && (imageSeries.page > 0) && imageSeries.element.find(\".more\").visible()) {\n                render(imageSeries, imageSeries.page + 1);\n            }\n        }\n    }\n}\n\n\nfunction render(imageSeries, page) {\n\n    // disable the image series 'more' button\n    var $moreButton = imageSeries.element.find(\".more\");\n    $moreButton.off(\"click\");\n    $moreButton.finish().hide();\n\n    var images = imageSeries.images;\n    var count = parseInt(imageSeries.count);\n    var start = page * count;\n    var end = start + count <= images.length ? start + count : images.length;\n\n    if (DEBUG) console.info(\"Rengering images for series:\" + imageSeries.id + \", start=\" + start + \", end=\" + end);\n\n    var $appendElement = imageSeries.element.find(\".images\");\n    var $spinnerElement =  imageSeries.element.find('.spinner');\n\n    // show load indicator\n    $spinnerElement.fadeIn(100);\n\n    for (var i=start; i<end; i++) {\n        var image = images[i];\n        // render the base markup for this element\n        var imageHtml = imageSeries.template.replace(\"%(index)\", image.index);\n        for (var property in image) {\n            if (image.hasOwnProperty(property)) {\n                var decodedProperty = null;\n                if (property != \"title\") {\n                    // title property has already been decoded\n                    decodedProperty = decodeURIComponent(image[property]);\n                } else {\n                    decodedProperty = image[property];\n                }\n                imageHtml = imageHtml.split(\"%(\" + property + \")\").join(decodedProperty);\n            }\n        }\n        // create DOM object from String\n        var $imageElement = jQ('<div/>').html(imageHtml).contents();\n        // add click handler\n        $imageElement.click(image, function(event) {\n            event.preventDefault();\n            openPhotoSwipe(event.data.index, event.data.id);\n        });\n        // append the image html to the image series\n        $appendElement.append($imageElement);\n    }\n\n    // hide load indicator\n    $spinnerElement.finish().fadeOut(1000);\n    // set the image series page\n    imageSeries.page = page;\n\n    if (end < images.length) {\n        // not all images have been rendered\n        if (page == 0 || imageSeries.autoload != \"true\") {\n            // add click handlerto button if no autoload\n            $moreButton.click(function() {\n                render(imageSeries, page + 1);\n            });\n        }\n        $moreButton.finish().fadeIn(250);\n        // call autoload once to ensure visible buttons are directly rendered without scrolling\n        handleAutoLoaders();\n    } else {\n        // the series images are all rendered\n        imageSeries.loaded = true;\n        $moreButton.finish().fadeOut(1000);\n    }\n}\n\nfunction collect(imageSeries) {\n\n    imageSeries.template = decodeURIComponent(imageSeries.template);\n    var images = [];\n    var imageSrc = [];\n    var $imageSeriesItems = imageSeries.element.find(\"li[data-image]\");\n    $imageSeriesItems.each(function(index) {\n\n        var imageData = jQ(this).data(\"image\");\n        if (! imageSrc.indexOf(imageData.tilesrc) >= 0) {\n            // only add images that are not already in the list\n            // this way users can manually add images from folders without duplication, e.g. for another order\n            imageData.id = imageSeries.id;\n            imageData.index = index;\n            imageData.title = decodeURIComponent(imageData.caption);\n            imageData.page = 0;\n\n            // calculate image width and height by parsing the property string\n            if (imageData.size.indexOf(',') >= 0 && imageData.size.indexOf(':') >= 0) {\n                var size = imageData.size.split(',');\n                imageData.width  = size[0].split(':')[1];\n                imageData.height = size[1].split(':')[1];\n            }\n            imageSrc.push(imageData.tilesrc);\n            images.push(imageData);\n        }\n    });\n\n    if (DEBUG) console.info(\"Image image series collected \" + images.length + \" images:\" + imageSeries + \", path=\" + imageSeries.path + \", template=\" + imageSeries.template);\n    imageSeries.images = images;\n    render(imageSeries, 0);\n}\n\nfunction initImageSeries($elements) {\n\n    // initialize image series with values from data attributes\n    $elements.each(function(){\n        var $element = jQ(this);\n        var $imageSeries = $element.find('.series');\n\n        if (typeof $imageSeries.data(\"imageseries\") != 'undefined') {\n            var imageSeries = $imageSeries.data(\"imageseries\");\n            imageSeries.id = $imageSeries.attr(\"id\");\n            imageSeries.element = $imageSeries;\n            m_galleries[imageSeries.id] = imageSeries;\n            if (imageSeries.autoload == \"true\") {\n                m_autoLoadSeries.push(imageSeries);\n            }\n            if (DEBUG) console.info(\"Image image series data found:\" + imageSeries + \", path=\" + imageSeries.path + \", count=\" + imageSeries.count + \", autoload=\" + imageSeries.autoload);\n            collect(imageSeries);\n        }\n    });\n\n    if (m_autoLoadSeries.length > 0) {\n        // only enable scroll listener if we have at least one autoloading image series\n        jQ(window).on('scroll', handleAutoLoaders).resize(handleAutoLoaders);\n    }\n}\n\nfunction initZoomers($elements) {\n\n    var images = [];\n    var imageSrc = [];\n    var indexCount = -1;\n    $elements.each(function(){\n\n        var $this = jQ(this);\n        var addClick = false;\n\n        var imageData = $this.data(\"imagezoom\");\n        if (typeof imageData.src !== 'undefined') {\n            if (DEBUG) console.info(\"Image zoom element found with direct path=\" + imageData.src);\n            addClick = ($this.closest('a').length == 0);\n        } else if ($this.is(\"a\")) {\n            imageData.src = $this.attr(\"href\");\n            addClick = true;\n        } else if ($this.is(\"img\")) {\n            imageData.src = $this.attr(\"src\");\n            addClick = ($this.closest('a').length == 0);\n        }\n        var existingIndex = imageSrc.indexOf(imageData.src);\n        indexCount = existingIndex < 0 ? indexCount + 1 : indexCount;\n        var targetIndex = existingIndex < 0 ? indexCount : existingIndex;\n        if (imageData.src) {\n            imageData.index = targetIndex;\n            imageData.id = \"imagezoom\";\n            if (typeof imageData.caption !== 'undefined') {\n                imageData.title = decodeURIComponent(imageData.caption);\n            }\n            if (existingIndex < 0) {\n                images.push(imageData);\n            }\n            imageSrc.push(imageData.src);\n            if (addClick) {\n                $this.click(function(e) {\n                    e.preventDefault();\n                    openPhotoSwipe(targetIndex, \"imagezoom\");\n                });\n                $this.keyup(function(e) {\n                    if (e.keyCode === 13) {\n                        e.preventDefault();\n                        openPhotoSwipe(targetIndex, \"imagezoom\");\n                    }\n                });\n            }\n\n            if (DEBUG) console.info(\"Image zoom element added path=\" + imageData.src + \", index=\" + imageData.index);\n        }\n    });\n\n    var imageSeries = {};\n    imageSeries.id = \"imagezoom\";\n    imageSeries.images = images;\n    m_galleries[imageSeries.id]= imageSeries;\n}\n\n/****** Exported functions ******/\n\nexport function reInit(jQ, DEBUG, parent) {\n    var $imageZoomElements = jQ(parent + ' [data-imagezoom]');\n    if ($imageZoomElements.length > 0) {\n        if (DEBUG) console.info(\"ImageSeries.reInit() parent=\" + parent + \" [data-imagezoom] elements=\" + $imageZoomElements.length);\n        initZoomers($imageZoomElements);\n    }\n}\n\n\nexport function init(jQuery, debug) {\n\n    jQ = jQuery;\n    DEBUG = debug;\n\n    if (DEBUG) console.info(\"ImageSeries.init()\");\n\n    var $imageSeriesElements = jQ('.type-imageseries');\n    var $imageZoomElements = jQ('[data-imagezoom]');\n\n    if (DEBUG) console.info(\"ImageSeries.init() .type-imageseries elements found: \" + $imageSeriesElements.length);\n    if (DEBUG) console.info(\"ImageSeries.init() [data-imagezoom] elements found: \" + $imageZoomElements.length);\n\n    if ($imageSeriesElements.length > 0 || $imageZoomElements.length > 0) {\n        // We have found image for a series, append the PhotoSwipe markup\n        if ($imageSeriesElements.length > 0) {\n            initImageSeries($imageSeriesElements);\n        }\n        if ($imageZoomElements.length > 0) {\n            initZoomers($imageZoomElements);\n        }\n        Mercury.addUpdateCallback(reInit);\n    }\n}\n\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","e","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","PanBounds","slide","currZoomLevel","center","reset","update","_updateAxis","dispatch","axis","elSize","data","panAreaSize","correctPan","panOffset","ZoomLevel","maxWidth","maxHeight","elementSize","hRatio","vRatio","fit","fill","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Number","Slide","isActive","currIndex","currentResolution","isFirstSlide","opener","isOpen","pan","content","contentLoader","getContentBySlide","container","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","holderElement","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","heavyAppended","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","end","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","actionFullName","clickToCloseNonZoomable","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","supportsTouch","maxTouchPoints","drag","tapHandler","on","events","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","preventDefault","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","_tapTimer","setTimeout","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","itemHolders","resetPosition","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","_containerShiftIndex","_currPositionIndex","_prevPositionIndex","appendHolders","i","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","Keyboard","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","returnFocus","_wasFocused","focus","which","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","CSSAnimation","props","onFinish","_target","_onComplete","_onTransitionEnd","_helperTimeout","_finalizeAnimation","_finished","removeEventListener","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","easer","prevTime","animationLoop","_raf","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","setAttribute","innerHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","_lastUpdatedZoomLevel","init","isRegistered","uiElementsData","sort","a","b","items","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent","details","assign","Placeholder","imageSrc","decoding","alt","src","parentNode","Content","instance","displayedImageWidth","displayedImageHeight","isAttached","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderSrc","msrc","isImageContent","loadImage","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","errorMsgEl","errorMsg","supportsDecode","isDecoding","decode","finally","appendImage","lazyLoadData","createContentFromData","zoomLevel","ceil","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","getContentByIndex","getItemData","lazyLoadSlide","addToCache","removeByIndex","indexToRemove","item","find","MIN_OPACITY","Opener","isClosed","_prepareOpen","_thumbBounds","open","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","off","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_placeholder","_useAnimation","_animateZoom","Boolean","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","innerRect","_cropContainer1","_cropContainer2","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","decoded","isDelaying","img","reject","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","_listeners","_filters","addFilter","fn","priority","f1","f2","removeFilter","args","apply","numItems","dataSource","_getGalleryDOMElements","gallery","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","super","_prepareOptions","_prevViewportSize","keyboard","isDestroying","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_initialItemData","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","listeners","refreshSlideContent","slideIndex","potentialHolderIndex","holder","hasMouse","matchMedia","matches","test","userAgent","setScrollOffset","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement","jQ","DEBUG","m_autoLoadSeries","m_galleries","openPhotoSwipe","images","photoSwipe","currSlideData","handleAutoLoaders","imageSeries","loaded","page","render","$moreButton","finish","hide","count","console","info","$appendElement","$spinnerElement","fadeIn","imageHtml","replace","property","hasOwnProperty","decodedProperty","decodeURIComponent","$imageElement","contents","fadeOut","autoload","initImageSeries","$elements","each","$imageSeries","attr","path","imageData","tilesrc","caption","collect","initZoomers","indexCount","$this","addClick","is","existingIndex","targetIndex","keyup","reInit","$imageZoomElements","jQuery","debug","$imageSeriesElements","Mercury","addUpdateCallback"],"sourceRoot":""}