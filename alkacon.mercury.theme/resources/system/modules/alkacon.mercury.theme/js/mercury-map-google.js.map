{"version":3,"file":"mercury-map-google.js","mappings":"8KACe,SAASA,EAAOC,EAAKC,EAAQC,EAAUC,EAAMC,EAAOC,GAC/D,GAAID,EAAQD,GAAQD,EAAU,OAE9B,MAAMI,EAAKH,EAAOC,GAAU,EAE5B,EAAOJ,EAAKC,EAAQK,EAAGH,EAAMC,EAAOC,EAAQ,GAE5CN,EAAOC,EAAKC,EAAQC,EAAUC,EAAMG,EAAI,EAAGD,EAAQ,GACnDN,EAAOC,EAAKC,EAAQC,EAAUI,EAAI,EAAGF,EAAOC,EAAQ,EACxD,CAEA,SAAS,EAAOL,EAAKC,EAAQM,EAAGJ,EAAMC,EAAOI,GAEzC,KAAOJ,EAAQD,GAAM,CACjB,GAAIC,EAAQD,EAAO,IAAK,CACpB,MAAMM,EAAIL,EAAQD,EAAO,EACnBG,EAAIC,EAAIJ,EAAO,EACfO,EAAIC,KAAKC,IAAIH,GACbI,EAAI,GAAMF,KAAKG,IAAI,EAAIJ,EAAI,GAC3BK,EAAK,GAAMJ,KAAKK,KAAKN,EAAIG,GAAKJ,EAAII,GAAKJ,IAAMH,EAAIG,EAAI,EAAI,GAAK,EAAI,GAGxE,EAAOT,EAAKC,EAAQM,EAFJI,KAAKM,IAAId,EAAMQ,KAAKO,MAAMX,EAAID,EAAIO,EAAIJ,EAAIM,IACzCJ,KAAKQ,IAAIf,EAAOO,KAAKO,MAAMX,GAAKE,EAAIH,GAAKO,EAAIJ,EAAIM,IACxBP,EAC9C,CAEA,MAAMY,EAAInB,EAAO,EAAIM,EAAIC,GACzB,IAAIa,EAAIlB,EACJmB,EAAIlB,EAKR,IAHAmB,EAASvB,EAAKC,EAAQE,EAAMI,GACxBN,EAAO,EAAIG,EAAQI,GAAOY,GAAGG,EAASvB,EAAKC,EAAQE,EAAMC,GAEtDiB,EAAIC,GAAG,CAIV,IAHAC,EAASvB,EAAKC,EAAQoB,EAAGC,GACzBD,IACAC,IACOrB,EAAO,EAAIoB,EAAIb,GAAOY,GAAGC,IAChC,KAAOpB,EAAO,EAAIqB,EAAId,GAAOY,GAAGE,GACpC,CAEIrB,EAAO,EAAIE,EAAOK,KAASY,EAAGG,EAASvB,EAAKC,EAAQE,EAAMmB,IAE1DA,IACAC,EAASvB,EAAKC,EAAQqB,EAAGlB,IAGzBkB,GAAKf,IAAGJ,EAAOmB,EAAI,GACnBf,GAAKe,IAAGlB,EAAQkB,EAAI,EAC5B,CACJ,CAEA,SAASC,EAASvB,EAAKC,EAAQoB,EAAGC,GAC9BE,EAAKxB,EAAKqB,EAAGC,GACbE,EAAKvB,EAAQ,EAAIoB,EAAG,EAAIC,GACxBE,EAAKvB,EAAQ,EAAIoB,EAAI,EAAG,EAAIC,EAAI,EACpC,CAEA,SAASE,EAAKC,EAAKJ,EAAGC,GAClB,MAAMI,EAAMD,EAAIJ,GAChBI,EAAIJ,GAAKI,EAAIH,GACbG,EAAIH,GAAKI,CACb,CCpBA,SAASC,EAAOC,EAAIC,EAAIC,EAAIC,GACxB,MAAMC,EAAKJ,EAAKE,EACVG,EAAKJ,EAAKE,EAChB,OAAOC,EAAKA,EAAKC,EAAKA,CAC1B,CCzCA,MAAMC,EAAcC,GAAKA,EAAE,GACrBC,EAAcD,GAAKA,EAAE,GAEZ,MAAME,EACjBC,YAAYC,EAAQC,EAAON,EAAaO,EAAOL,EAAalC,EAAW,GAAIwC,EAAYC,cACnFC,KAAK1C,SAAWA,EAChB0C,KAAKL,OAASA,EAEd,MAAMM,EAAiBN,EAAOO,OAAS,MAAQC,YAAcC,YAEvDhD,EAAM4C,KAAK5C,IAAM,IAAI6C,EAAeN,EAAOO,QAC3C7C,EAAS2C,KAAK3C,OAAS,IAAIyC,EAA0B,EAAhBH,EAAOO,QAElD,IAAK,IAAIzB,EAAI,EAAGA,EAAIkB,EAAOO,OAAQzB,IAC/BrB,EAAIqB,GAAKA,EACTpB,EAAO,EAAIoB,GAAKmB,EAAKD,EAAOlB,IAC5BpB,EAAO,EAAIoB,EAAI,GAAKoB,EAAKF,EAAOlB,IAGpC,EAAKrB,EAAKC,EAAQC,EAAU,EAAGF,EAAI8C,OAAS,EAAG,EACnD,CAEAG,MAAMC,EAAMC,EAAMC,EAAMC,GACpB,OC3BO,SAAerD,EAAKC,EAAQiD,EAAMC,EAAMC,EAAMC,EAAMnD,GAC/D,MAAMoD,EAAQ,CAAC,EAAGtD,EAAI8C,OAAS,EAAG,GAC5BS,EAAS,GACf,IAAIC,EAAGC,EAEP,KAAOH,EAAMR,QAAQ,CACjB,MAAMY,EAAOJ,EAAMK,MACbvD,EAAQkD,EAAMK,MACdxD,EAAOmD,EAAMK,MAEnB,GAAIvD,EAAQD,GAAQD,EAAU,CAC1B,IAAK,IAAImB,EAAIlB,EAAMkB,GAAKjB,EAAOiB,IAC3BmC,EAAIvD,EAAO,EAAIoB,GACfoC,EAAIxD,EAAO,EAAIoB,EAAI,GACfmC,GAAKN,GAAQM,GAAKJ,GAAQK,GAAKN,GAAQM,GAAKJ,GAAME,EAAOK,KAAK5D,EAAIqB,IAE1E,QACJ,CAEA,MAAMf,EAAIK,KAAKO,OAAOf,EAAOC,GAAS,GAEtCoD,EAAIvD,EAAO,EAAIK,GACfmD,EAAIxD,EAAO,EAAIK,EAAI,GAEfkD,GAAKN,GAAQM,GAAKJ,GAAQK,GAAKN,GAAQM,GAAKJ,GAAME,EAAOK,KAAK5D,EAAIM,IAEtE,MAAMuD,GAAYH,EAAO,GAAK,GAEjB,IAATA,EAAaR,GAAQM,EAAIL,GAAQM,KACjCH,EAAMM,KAAKzD,GACXmD,EAAMM,KAAKtD,EAAI,GACfgD,EAAMM,KAAKC,KAEF,IAATH,EAAaN,GAAQI,EAAIH,GAAQI,KACjCH,EAAMM,KAAKtD,EAAI,GACfgD,EAAMM,KAAKxD,GACXkD,EAAMM,KAAKC,GAEnB,CAEA,OAAON,CACX,CDdeN,CAAML,KAAK5C,IAAK4C,KAAK3C,OAAQiD,EAAMC,EAAMC,EAAMC,EAAMT,KAAK1C,SACrE,CAEA4D,OAAON,EAAGC,EAAGM,GACT,OD/BO,SAAgB/D,EAAKC,EAAQ+D,EAAIC,EAAIF,EAAG7D,GACnD,MAAMoD,EAAQ,CAAC,EAAGtD,EAAI8C,OAAS,EAAG,GAC5BS,EAAS,GACTW,EAAKH,EAAIA,EAEf,KAAOT,EAAMR,QAAQ,CACjB,MAAMY,EAAOJ,EAAMK,MACbvD,EAAQkD,EAAMK,MACdxD,EAAOmD,EAAMK,MAEnB,GAAIvD,EAAQD,GAAQD,EAAU,CAC1B,IAAK,IAAImB,EAAIlB,EAAMkB,GAAKjB,EAAOiB,IACvBM,EAAO1B,EAAO,EAAIoB,GAAIpB,EAAO,EAAIoB,EAAI,GAAI2C,EAAIC,IAAOC,GAAIX,EAAOK,KAAK5D,EAAIqB,IAEhF,QACJ,CAEA,MAAMf,EAAIK,KAAKO,OAAOf,EAAOC,GAAS,GAEhCoD,EAAIvD,EAAO,EAAIK,GACfmD,EAAIxD,EAAO,EAAIK,EAAI,GAErBqB,EAAO6B,EAAGC,EAAGO,EAAIC,IAAOC,GAAIX,EAAOK,KAAK5D,EAAIM,IAEhD,MAAMuD,GAAYH,EAAO,GAAK,GAEjB,IAATA,EAAaM,EAAKD,GAAKP,EAAIS,EAAKF,GAAKN,KACrCH,EAAMM,KAAKzD,GACXmD,EAAMM,KAAKtD,EAAI,GACfgD,EAAMM,KAAKC,KAEF,IAATH,EAAaM,EAAKD,GAAKP,EAAIS,EAAKF,GAAKN,KACrCH,EAAMM,KAAKtD,EAAI,GACfgD,EAAMM,KAAKxD,GACXkD,EAAMM,KAAKC,GAEnB,CAEA,OAAON,CACX,CCReO,CAAOlB,KAAK5C,IAAK4C,KAAK3C,OAAQuD,EAAGC,EAAGM,EAAGnB,KAAK1C,SACvD,EE9BJ,MAAMiE,EAAiB,CACnBC,QAAS,EACTC,QAAS,GACTC,UAAW,EACXC,OAAQ,GACRC,OAAQ,IACRtE,SAAU,GACVU,KAAK,EAGL6D,YAAY,EAGZC,OAAQ,KAGRC,IAAKC,GAASA,GAGZC,EAASlE,KAAKkE,SAAWnD,EAAiD,IAAIoD,aAAa,GAAzDtB,IAAQ9B,EAAI,IAAM8B,EAAU9B,EAAI,KAA1C,IAACA,EAEhB,MAAMqD,EACjBzC,YAAY0C,GACRpC,KAAKoC,QAAUC,EAAOC,OAAOC,OAAOhB,GAAiBa,GACrDpC,KAAKwC,MAAQ,IAAIC,MAAMzC,KAAKoC,QAAQX,QAAU,EAClD,CAEAiB,KAAK/C,GACD,MAAM,IAAC3B,EAAG,QAAEwD,EAAO,QAAEC,EAAO,SAAEnE,GAAY0C,KAAKoC,QAE3CpE,GAAK2E,QAAQC,KAAK,cAEtB,MAAMC,EAAU,WAAalD,EAAOO,gBAChClC,GAAK2E,QAAQC,KAAKC,GAEtB7C,KAAKL,OAASA,EAGd,IAAImD,EAAW,GACf,IAAK,IAAIrE,EAAI,EAAGA,EAAIkB,EAAOO,OAAQzB,IAC1BkB,EAAOlB,GAAGsE,UACfD,EAAS9B,KAAKgC,EAAmBrD,EAAOlB,GAAIA,IAEhDuB,KAAKwC,MAAMf,EAAU,GAAK,IAAIhC,EAAOqD,EAAUlD,EAAMC,EAAMvC,EAAU4E,cAEjElE,GAAK2E,QAAQM,QAAQJ,GAIzB,IAAK,IAAI/E,EAAI2D,EAAS3D,GAAK0D,EAAS1D,IAAK,CACrC,MAAMoF,GAAOC,KAAKD,MAGlBJ,EAAW9C,KAAKoD,SAASN,EAAUhF,GACnCkC,KAAKwC,MAAM1E,GAAK,IAAI2B,EAAOqD,EAAUlD,EAAMC,EAAMvC,EAAU4E,cAEvDlE,GAAK2E,QAAQ3E,IAAI,2BAA4BF,EAAGgF,EAAS5C,QAASiD,KAAKD,MAAQA,EACvF,CAIA,OAFIlF,GAAK2E,QAAQM,QAAQ,cAElBjD,IACX,CAEAqD,YAAYC,EAAMC,GACd,IAAIC,IAAWF,EAAK,GAAK,KAAO,IAAM,KAAO,IAAM,IACnD,MAAMG,EAAS1F,KAAKM,KAAK,GAAIN,KAAKQ,IAAI,GAAI+E,EAAK,KAC/C,IAAII,EAAqB,MAAZJ,EAAK,GAAa,MAAQA,EAAK,GAAK,KAAO,IAAM,KAAO,IAAM,IAC3E,MAAMK,EAAS5F,KAAKM,KAAK,GAAIN,KAAKQ,IAAI,GAAI+E,EAAK,KAE/C,GAAIA,EAAK,GAAKA,EAAK,IAAM,IACrBE,GAAU,IACVE,EAAS,SACN,GAAIF,EAASE,EAAQ,CACxB,MAAME,EAAa5D,KAAKqD,YAAY,CAACG,EAAQC,EAAQ,IAAKE,GAASJ,GAC7DM,EAAa7D,KAAKqD,YAAY,EAAE,IAAKI,EAAQC,EAAQC,GAASJ,GACpE,OAAOK,EAAWE,OAAOD,EAC7B,CAEA,MAAME,EAAO/D,KAAKwC,MAAMxC,KAAKgE,WAAWT,IAClCnG,EAAM2G,EAAK1D,MAAM4D,EAAKT,GAASU,EAAKP,GAASM,EAAKP,GAASQ,EAAKT,IAChEX,EAAW,GACjB,IAAK,MAAMqB,KAAM/G,EAAK,CAClB,MAAMgH,EAAIL,EAAKpE,OAAOwE,GACtBrB,EAAS9B,KAAKoD,EAAEC,UAAYC,EAAeF,GAAKpE,KAAKL,OAAOyE,EAAEG,OAClE,CACA,OAAOzB,CACX,CAEA0B,YAAYC,GACR,MAAMC,EAAW1E,KAAK2E,aAAaF,GAC7BG,EAAa5E,KAAK6E,eAAeJ,GACjCK,EAAW,oCAEXP,EAAQvE,KAAKwC,MAAMoC,GACzB,IAAKL,EAAO,MAAM,IAAIQ,MAAMD,GAE5B,MAAME,EAAST,EAAM5E,OAAO+E,GAC5B,IAAKM,EAAQ,MAAM,IAAID,MAAMD,GAE7B,MAAM3D,EAAInB,KAAKoC,QAAQT,QAAU3B,KAAKoC,QAAQR,OAAS7D,KAAKkH,IAAI,EAAGL,EAAa,IAC1ExH,EAAMmH,EAAMrD,OAAO8D,EAAOpE,EAAGoE,EAAOnE,EAAGM,GACvC+D,EAAW,GACjB,IAAK,MAAMf,KAAM/G,EAAK,CAClB,MAAMgH,EAAIG,EAAM5E,OAAOwE,GACnBC,EAAEe,WAAaV,GACfS,EAASlE,KAAKoD,EAAEC,UAAYC,EAAeF,GAAKpE,KAAKL,OAAOyE,EAAEG,OAEtE,CAEA,GAAwB,IAApBW,EAAShF,OAAc,MAAM,IAAI6E,MAAMD,GAE3C,OAAOI,CACX,CAEAE,UAAUX,EAAWY,EAAOC,GACxBD,EAAQA,GAAS,GACjBC,EAASA,GAAU,EAEnB,MAAMC,EAAS,GAGf,OAFAvF,KAAKwF,cAAcD,EAAQd,EAAWY,EAAOC,EAAQ,GAE9CC,CACX,CAEAE,QAAQ3H,EAAG8C,EAAGC,GACV,MAAMkD,EAAO/D,KAAKwC,MAAMxC,KAAKgE,WAAWlG,IAClC4H,EAAK3H,KAAKkH,IAAI,EAAGnH,IACjB,OAAC8D,EAAM,OAAED,GAAU3B,KAAKoC,QACxB7C,EAAIoC,EAASC,EACb+D,GAAO9E,EAAItB,GAAKmG,EAChBE,GAAU/E,EAAI,EAAItB,GAAKmG,EAEvBG,EAAO,CACTC,SAAU,IAkBd,OAfA9F,KAAK+F,iBACDhC,EAAK1D,OAAOO,EAAIrB,GAAKmG,EAAIC,GAAM/E,EAAI,EAAIrB,GAAKmG,EAAIE,GAChD7B,EAAKpE,OAAQiB,EAAGC,EAAG6E,EAAIG,GAEjB,IAANjF,GACAZ,KAAK+F,iBACDhC,EAAK1D,MAAM,EAAId,EAAImG,EAAIC,EAAK,EAAGC,GAC/B7B,EAAKpE,OAAQ+F,EAAI7E,EAAG6E,EAAIG,GAE5BjF,IAAM8E,EAAK,GACX1F,KAAK+F,iBACDhC,EAAK1D,MAAM,EAAGsF,EAAKpG,EAAImG,EAAIE,GAC3B7B,EAAKpE,QAAS,EAAGkB,EAAG6E,EAAIG,GAGzBA,EAAKC,SAAS5F,OAAS2F,EAAO,IACzC,CAEAG,wBAAwBvB,GACpB,IAAIwB,EAAgBjG,KAAK6E,eAAeJ,GAAa,EACrD,KAAOwB,GAAiBjG,KAAKoC,QAAQX,SAAS,CAC1C,MAAMyD,EAAWlF,KAAKwE,YAAYC,GAElC,GADAwB,IACwB,IAApBf,EAAShF,OAAc,MAC3BuE,EAAYS,EAAS,GAAGgB,WAAWC,UACvC,CACA,OAAOF,CACX,CAEAT,cAAc7E,EAAQ8D,EAAWY,EAAOC,EAAQc,GAC5C,MAAMlB,EAAWlF,KAAKwE,YAAYC,GAElC,IAAK,MAAM4B,KAASnB,EAAU,CAC1B,MAAMlD,EAAQqE,EAAMH,WAkBpB,GAhBIlE,GAASA,EAAMsE,QACXF,EAAUpE,EAAMuE,aAAejB,EAE/Bc,GAAWpE,EAAMuE,YAGjBH,EAAUpG,KAAKwF,cAAc7E,EAAQqB,EAAMmE,WAAYd,EAAOC,EAAQc,GAGnEA,EAAUd,EAEjBc,IAGAzF,EAAOK,KAAKqF,GAEZ1F,EAAOT,SAAWmF,EAAO,KACjC,CAEA,OAAOe,CACX,CAEAL,iBAAiB3I,EAAKuC,EAAQiB,EAAGC,EAAG6E,EAAIG,GACpC,IAAK,MAAMpH,KAAKrB,EAAK,CACjB,MAAMgH,EAAIzE,EAAOlB,GACX+H,EAAYpC,EAAEC,UAEpB,IAAIoC,EAAMC,EAAIC,EACd,GAAIH,EACAC,EAAOG,EAAqBxC,GAC5BsC,EAAKtC,EAAExD,EACP+F,EAAKvC,EAAEvD,MACJ,CACH,MAAMtB,EAAIS,KAAKL,OAAOyE,EAAEG,OACxBkC,EAAOlH,EAAE2G,WACTQ,EAAKzC,EAAK1E,EAAEwD,SAAS8D,YAAY,IACjCF,EAAKzC,EAAK3E,EAAEwD,SAAS8D,YAAY,GACrC,CAEA,MAAMC,EAAI,CACNC,KAAM,EACNhE,SAAU,CAAC,CACPhF,KAAKiJ,MAAMhH,KAAKoC,QAAQR,QAAU8E,EAAKhB,EAAK9E,IAC5C7C,KAAKiJ,MAAMhH,KAAKoC,QAAQR,QAAU+E,EAAKjB,EAAK7E,MAEhD4F,QAIJ,IAAItC,EACAqC,EACArC,EAAKC,EAAED,GACAnE,KAAKoC,QAAQP,WAEpBsC,EAAKC,EAAEG,MACAvE,KAAKL,OAAOyE,EAAEG,OAAOJ,KAE5BA,EAAKnE,KAAKL,OAAOyE,EAAEG,OAAOJ,SAGnB8C,IAAP9C,IAAkB2C,EAAE3C,GAAKA,GAE7B0B,EAAKC,SAAS9E,KAAK8F,EACvB,CACJ,CAEA9C,WAAWlG,GACP,OAAOC,KAAKM,IAAI2B,KAAKoC,QAAQZ,QAASzD,KAAKQ,IAAIR,KAAKO,OAAOR,GAAIkC,KAAKoC,QAAQX,QAAU,GAC1F,CAEA2B,SAASzD,EAAQ4D,GACb,MAAMT,EAAW,IACX,OAACnB,EAAM,OAAEC,EAAM,OAAEE,EAAM,UAAEJ,GAAa1B,KAAKoC,QAC3CjB,EAAIQ,GAAUC,EAAS7D,KAAKkH,IAAI,EAAG1B,IAGzC,IAAK,IAAI9E,EAAI,EAAGA,EAAIkB,EAAOO,OAAQzB,IAAK,CACpC,MAAMc,EAAII,EAAOlB,GAEjB,GAAIc,EAAEgE,MAAQA,EAAM,SACpBhE,EAAEgE,KAAOA,EAGT,MAAMQ,EAAO/D,KAAKwC,MAAMe,EAAO,GACzB2D,EAAcnD,EAAK7C,OAAO3B,EAAEqB,EAAGrB,EAAEsB,EAAGM,GAEpCgG,EAAkB5H,EAAE8E,WAAa,EACvC,IAAIA,EAAY8C,EAGhB,IAAK,MAAMC,KAAcF,EAAa,CAClC,MAAMG,EAAItD,EAAKpE,OAAOyH,GAElBC,EAAE9D,KAAOA,IAAMc,GAAagD,EAAEhD,WAAa,EACnD,CAGA,GAAIA,EAAY8C,GAAmB9C,GAAa3C,EAAW,CACvD,IAAI4F,EAAK/H,EAAEqB,EAAIuG,EACXI,EAAKhI,EAAEsB,EAAIsG,EAEXK,EAAoB1F,GAAUqF,EAAkB,EAAInH,KAAKyH,KAAKlI,GAAG,GAAQ,KAG7E,MAAM4E,GAAM1F,GAAK,IAAM8E,EAAO,GAAKvD,KAAKL,OAAOO,OAE/C,IAAK,MAAMkH,KAAcF,EAAa,CAClC,MAAMG,EAAItD,EAAKpE,OAAOyH,GAEtB,GAAIC,EAAE9D,MAAQA,EAAM,SACpB8D,EAAE9D,KAAOA,EAET,MAAMmE,EAAaL,EAAEhD,WAAa,EAClCiD,GAAMD,EAAEzG,EAAI8G,EACZH,GAAMF,EAAExG,EAAI6G,EAEZL,EAAElC,SAAWhB,EAETrC,IACK0F,IAAmBA,EAAoBxH,KAAKyH,KAAKlI,GAAG,IACzDuC,EAAO0F,EAAmBxH,KAAKyH,KAAKJ,IAE5C,CAEA9H,EAAE4F,SAAWhB,EACbrB,EAAS9B,KAAK2G,EAAcL,EAAKjD,EAAWkD,EAAKlD,EAAWF,EAAIE,EAAWmD,GAE/E,MAGI,GAFA1E,EAAS9B,KAAKzB,GAEV8E,EAAY,EACZ,IAAK,MAAM+C,KAAcF,EAAa,CAClC,MAAMG,EAAItD,EAAKpE,OAAOyH,GAClBC,EAAE9D,MAAQA,IACd8D,EAAE9D,KAAOA,EACTT,EAAS9B,KAAKqG,GAClB,CAGZ,CAEA,OAAOvE,CACX,CAGA6B,aAAaF,GACT,OAAQA,EAAYzE,KAAKL,OAAOO,QAAW,CAC/C,CAGA2E,eAAeJ,GACX,OAAQA,EAAYzE,KAAKL,OAAOO,QAAU,EAC9C,CAEAuH,KAAKG,EAAOC,GACR,GAAID,EAAMvD,UACN,OAAOwD,EAAQxF,EAAO,CAAC,EAAGuF,EAAM1B,YAAc0B,EAAM1B,WAExD,MAAM4B,EAAW9H,KAAKL,OAAOiI,EAAMrD,OAAO2B,WACpCvF,EAASX,KAAKoC,QAAQL,IAAI+F,GAChC,OAAOD,GAASlH,IAAWmH,EAAWzF,EAAO,CAAC,EAAG1B,GAAUA,CAC/D,EAGJ,SAASgH,EAAc/G,EAAGC,EAAGsD,EAAIE,EAAW6B,GACxC,MAAO,CACHtF,EAAGqB,EAAOrB,GACVC,EAAGoB,EAAOpB,GACV0C,KAAMwE,IACN5D,KACAgB,UAAW,EACXd,YACA6B,aAER,CAEA,SAASlD,EAAmBzD,EAAG4E,GAC3B,MAAOvD,EAAGC,GAAKtB,EAAEwD,SAAS8D,YAC1B,MAAO,CACHjG,EAAGqB,EAAOgC,EAAKrD,IACfC,EAAGoB,EAAOiC,EAAKrD,IACf0C,KAAMwE,IACNxD,MAAOJ,EACPgB,UAAW,EAEnB,CAEA,SAASb,EAAegC,GACpB,MAAO,CACHS,KAAM,UACN5C,GAAImC,EAAQnC,GACZ+B,WAAYU,EAAqBN,GACjCvD,SAAU,CACNgE,KAAM,QACNF,YAAa,EA6BXjG,EA7BiB0F,EAAQ1F,EA8BhB,KAAXA,EAAI,KA9B2BoH,EAAK1B,EAAQzF,MA6BxD,IAAcD,CA1Bd,CAEA,SAASgG,EAAqBN,GAC1B,MAAM2B,EAAQ3B,EAAQjC,UAChB6D,EACFD,GAAS,IAAQ,GAAGlK,KAAKiJ,MAAMiB,EAAQ,QACvCA,GAAS,IAAUlK,KAAKiJ,MAAMiB,EAAQ,KAAO,GAA7B,IAAuCA,EAC3D,OAAO5F,EAAOA,EAAO,CAAC,EAAGiE,EAAQJ,YAAa,CAC1CI,SAAS,EACTH,WAAYG,EAAQnC,GACpBoC,YAAa0B,EACbE,wBAAyBD,GAEjC,CAGA,SAASjE,EAAKmE,GACV,OAAOA,EAAM,IAAM,EACvB,CACA,SAASlE,EAAKmE,GACV,MAAMC,EAAMvK,KAAKuK,IAAID,EAAMtK,KAAKwK,GAAK,KAC/B1H,EAAK,GAAM,IAAO9C,KAAKC,KAAK,EAAIsK,IAAQ,EAAIA,IAAQvK,KAAKwK,GAC/D,OAAO1H,EAAI,EAAI,EAAIA,EAAI,EAAI,EAAIA,CACnC,CAMA,SAASmH,EAAKnH,GACV,MAAM2H,GAAM,IAAU,IAAJ3H,GAAW9C,KAAKwK,GAAK,IACvC,OAAO,IAAMxK,KAAK0K,KAAK1K,KAAKG,IAAIsK,IAAOzK,KAAKwK,GAAK,EACrD,CAEA,SAASlG,EAAOqG,EAAMC,GAClB,IAAK,MAAMxE,KAAMwE,EAAKD,EAAKvE,GAAMwE,EAAIxE,GACrC,OAAOuE,CACX,CAEA,SAAS9I,EAAKL,GACV,OAAOA,EAAEqB,CACb,CACA,SAASf,EAAKN,GACV,OAAOA,EAAEsB,CACb;;;;;;;;;;;;;;;AC9YA,SAAS+H,EAAO3K,EAAG4K,GACf,IAAIrK,EAAI,CAAC,EACT,IAAK,IAAIe,KAAKtB,EAAOqE,OAAOwG,UAAUC,eAAeC,KAAK/K,EAAGsB,IAAMsJ,EAAEI,QAAQ1J,GAAK,IAC9Ef,EAAEe,GAAKtB,EAAEsB,IACb,GAAS,MAALtB,GAAqD,mBAAjCqE,OAAO4G,sBACtB,KAAIzK,EAAI,EAAb,IAAgBc,EAAI+C,OAAO4G,sBAAsBjL,GAAIQ,EAAIc,EAAEW,OAAQzB,IAC3DoK,EAAEI,QAAQ1J,EAAEd,IAAM,GAAK6D,OAAOwG,UAAUK,qBAAqBH,KAAK/K,EAAGsB,EAAEd,MACvED,EAAEe,EAAEd,IAAMR,EAAEsB,EAAEd,IAF4B,CAItD,OAAOD,CACX,CAiBA,MAAM4K,EACF1J,aAAY,QAAE2J,EAAO,SAAEC,IACnBtJ,KAAKqJ,QAAUA,EACXC,IACIA,aAAoBC,OAAOC,KAAKC,OAChCzJ,KAAK0J,UAAYJ,EAGjBtJ,KAAK0J,UAAY,IAAIH,OAAOC,KAAKC,OAAOH,GAGpD,CACIK,aACA,GAA4B,IAAxB3J,KAAKqJ,QAAQnJ,QAAiBF,KAAK0J,UAGvC,OAAO1J,KAAKqJ,QAAQvH,QAAO,CAAC6H,EAAQC,IACzBD,EAAOtH,OAAOuH,EAAOC,gBAC7B,IAAIN,OAAOC,KAAKM,aAAa9J,KAAK0J,UAAW1J,KAAK0J,WACzD,CACIJ,eACA,OAAOtJ,KAAK0J,WAAa1J,KAAK2J,OAAOI,WACzC,CAII9B,YACA,OAAOjI,KAAKqJ,QAAQW,QAAQtM,GAAMA,EAAEuM,eAC/B/J,MACT,CAIAc,KAAK4I,GACD5J,KAAKqJ,QAAQrI,KAAK4I,EACtB,CAIAM,SACQlK,KAAK4J,SACL5J,KAAK4J,OAAOO,OAAO,aACZnK,KAAK4J,QAEhB5J,KAAKqJ,QAAQnJ,OAAS,CAC1B,EA4FJ,MAAMkK,EACF1K,aAAY,QAAE+B,EAAU,KACpBzB,KAAKyB,QAAUA,CACnB,CAaA4I,MAAK,QAAEhB,IACH,OAAOgB,EAAKhB,EAChB,EAsCJ,MAAMgB,EAAQhB,GACOA,EAAQtH,KAAK6H,GAAW,IAAIR,EAAQ,CACjDE,SAAUM,EAAOC,cACjBR,QAAS,CAACO,OAiJlB,MAAMU,UAA8BF,EAChC1K,YAAY6K,GACR,IAAI,QAAE9I,EAAO,OAAEE,EAAS,IAAO4I,EAAInI,EAAUwG,EAAO2B,EAAI,CAAC,UAAW,WACpEC,MAAM,CAAE/I,YACRzB,KAAKyK,aAAe,IAAI,EAAanI,OAAOoI,OAAO,CAAEjJ,QAASzB,KAAKyB,QAASE,UAAUS,IACtFpC,KAAK2K,MAAQ,CAAEpH,KAAM,KACzB,CACAqH,UAAUC,GACN,IAAIC,GAAU,EACd,IAAK,IAAMD,EAAMxB,QAASrJ,KAAKqJ,SAAU,CACrCyB,GAAU,EAEV9K,KAAKqJ,QAAU,IAAIwB,EAAMxB,SACzB,MAAM1J,EAASK,KAAKqJ,QAAQtH,KAAK6H,IACtB,CACH7C,KAAM,UACNhE,SAAU,CACNgE,KAAM,QACNF,YAAa,CACT+C,EAAOC,cAAczB,MACrBwB,EAAOC,cAAcxB,QAG7BnC,WAAY,CAAE0D,cAGtB5J,KAAKyK,aAAa/H,KAAK/C,EAC3B,CACA,MAAMgL,EAAQ,CAAEpH,KAAMsH,EAAM9I,IAAIgJ,WAWhC,OAVKD,GACG9K,KAAK2K,MAAMpH,KAAOvD,KAAKyB,SAAWkJ,EAAMpH,KAAOvD,KAAKyB,UAEpDqJ,EAAUA,IAAY,IAAM9K,KAAK2K,MAAOA,IAGhD3K,KAAK2K,MAAQA,EACTG,IACA9K,KAAK8C,SAAW9C,KAAKsG,QAAQuE,IAE1B,CAAE/H,SAAU9C,KAAK8C,SAAUgI,UACtC,CACAxE,SAAQ,IAAEvE,IACN,OAAO/B,KAAKyK,aACPpH,YAAY,EAAE,KAAM,GAAI,IAAK,IAAKtF,KAAKiJ,MAAMjF,EAAIgJ,YACjDhJ,IAAI/B,KAAKgL,iBAAiBC,KAAKjL,MACxC,CACAgL,kBAAmBjI,UAAY8D,aAAcuB,EAAKC,IAAO,WAAEnC,IACvD,GAAIA,EAAWI,QACX,OAAO,IAAI8C,EAAQ,CACfC,QAASrJ,KAAKyK,aACTrF,UAAUc,EAAWC,WAAY4B,KACjChG,KAAKmJ,GAASA,EAAKhF,WAAW0D,SACnCN,SAAU,IAAIC,OAAOC,KAAKC,OAAO,CAAEpB,MAAKD,UAG3C,CACD,MAAMwB,EAAS1D,EAAW0D,OAC1B,OAAO,IAAIR,EAAQ,CACfC,QAAS,CAACO,GACVN,SAAUM,EAAOC,eAEzB,CACJ,EAqBJ,MAAMsB,EACFzL,YAAY2J,EAASvG,GACjB9C,KAAKqJ,QAAU,CAAE+B,IAAK/B,EAAQnJ,QAC9B,MAAMmL,EAAsBvI,EAASf,KAAKuJ,GAAMA,EAAErD,QAC5CsD,EAAmBF,EAAoBvJ,QAAO,CAACwJ,EAAGjE,IAAMiE,EAAIjE,GAAG,GACrErH,KAAK8C,SAAW,CACZmF,MAAOnF,EAAS5C,OAChBmJ,QAAS,CACLmC,KAAMD,EAAmBzI,EAAS5C,OAClCkL,IAAKG,EACLhN,IAAKR,KAAKQ,OAAO8M,GACjBhN,IAAKN,KAAKM,OAAOgN,IAG7B,EAEJ,MAAMI,EAuCFC,QAAO,MAAEzD,EAAK,SAAEqB,GAAYqC,GAExB,MAAMC,EAAQ3D,EAAQlK,KAAKM,IAAI,GAAIsN,EAAM7I,SAASuG,QAAQmC,MAAQ,UAAY,UAExEK,EAAMC,OAAOC,KAAK,kBACjBH,6OAMP,OAAO,IAAIrC,OAAOC,KAAKwC,OAAO,CAC1B1C,WACA2C,KAAM,CACFC,IAAK,6BAA6BL,IAClCM,WAAY,IAAI5C,OAAOC,KAAK4C,KAAK,GAAI,KAEzCC,MAAO,CACHC,KAAMC,OAAOtE,GACb2D,MAAO,wBACPY,SAAU,QAEdC,MAAO,cAAcxE,YAErByE,OAAQC,OAAOpD,OAAOC,KAAKwC,OAAOY,YAAc3E,GAExD,EAoCJ,MAAM4E,EACFnN,eAXJ,SAAgBoN,EAAOC,GAGnB,IAAK,IAAIC,KAAYD,EAAMjE,UACvBgE,EAAMhE,UAAUkE,GAAYD,EAAMjE,UAAUkE,EAEpD,CAWQ,CAAOH,EAAiBtD,OAAOC,KAAKyD,YACxC,EAkBJ,IAAIC,GACJ,SAAWA,GACPA,EAAwC,iBAAI,kBAC5CA,EAAsC,eAAI,gBAC1CA,EAAqC,cAAI,OAC5C,CAJD,CAIGA,IAA0BA,EAAwB,CAAC,IACtD,MAAMC,EAA+B,CAACC,EAAG9G,EAASvE,KAC9CA,EAAIsL,UAAU/G,EAAQqD,OAAO,EAOjC,MAAM2D,UAAwBT,EAC1BnN,aAAY,IAAEqC,EAAG,QAAEsH,EAAU,GAAE,UAAEkE,EAAY,IAAIjD,EAAsB,CAAC,GAAE,SAAEkD,EAAW,IAAI/B,EAAiB,eAAEgC,EAAiBN,IAC3H3C,QACAxK,KAAKqJ,QAAU,IAAIA,GACnBrJ,KAAK8C,SAAW,GAChB9C,KAAKuN,UAAYA,EACjBvN,KAAKwN,SAAWA,EAChBxN,KAAKyN,eAAiBA,EAClB1L,GACA/B,KAAKmK,OAAOpI,EAEpB,CACA2L,UAAU9D,EAAQ+D,GACV3N,KAAKqJ,QAAQuE,SAAShE,KAG1B5J,KAAKqJ,QAAQrI,KAAK4I,GACb+D,GACD3N,KAAK0L,SAEb,CACAmC,WAAWxE,EAASsE,GAChBtE,EAAQyE,SAASlE,IACb5J,KAAK0N,UAAU9D,GAAQ,EAAK,IAE3B+D,GACD3N,KAAK0L,QAEb,CACAqC,aAAanE,EAAQ+D,GACjB,MAAMpJ,EAAQvE,KAAKqJ,QAAQJ,QAAQW,GACnC,OAAe,IAAXrF,IAIJqF,EAAOO,OAAO,MACdnK,KAAKqJ,QAAQ2E,OAAOzJ,EAAO,GACtBoJ,GACD3N,KAAK0L,UAEF,EACX,CACAuC,cAAc5E,EAASsE,GACnB,IAAIO,GAAU,EAOd,OANA7E,EAAQyE,SAASlE,IACbsE,EAAUlO,KAAK+N,aAAanE,GAAQ,IAASsE,CAAO,IAEpDA,IAAYP,GACZ3N,KAAK0L,SAEFwC,CACX,CACAC,aAAaR,GACT3N,KAAKqJ,QAAQnJ,OAAS,EACjByN,GACD3N,KAAK0L,QAEb,CAIAA,SACI,MAAM3J,EAAM/B,KAAKoO,SACjB,GAAIrM,aAAewH,OAAOC,KAAK6E,KAAOrO,KAAKsO,gBAAiB,CACxD/E,OAAOC,KAAK+E,MAAMC,QAAQxO,KAAMkN,EAAsBuB,iBAAkBzO,MACxE,MAAM,SAAE8C,EAAQ,QAAEgI,GAAY9K,KAAKuN,UAAU3C,UAAU,CACnDvB,QAASrJ,KAAKqJ,QACdtH,MACA2M,oBAAqB1O,KAAKsO,mBAG1BxD,GAAsB7D,MAAX6D,KAEX9K,KAAK2O,QAEL3O,KAAK8C,SAAWA,EAChB9C,KAAK4O,kBAETrF,OAAOC,KAAK+E,MAAMC,QAAQxO,KAAMkN,EAAsB2B,eAAgB7O,KAC1E,CACJ,CACA8O,QACI9O,KAAK+O,aAAe/O,KAAKoO,SAASY,YAAY,OAAQhP,KAAK0L,OAAOT,KAAKjL,OACvEA,KAAK0L,QACT,CACAuD,WACI1F,OAAOC,KAAK+E,MAAMW,eAAelP,KAAK+O,cACtC/O,KAAK2O,OACT,CACAA,QACI3O,KAAKqJ,QAAQyE,SAASlE,GAAWA,EAAOO,OAAO,QAC/CnK,KAAK8C,SAASgL,SAASxH,GAAYA,EAAQ4D,WAC3ClK,KAAK8C,SAAW,EACpB,CACA8L,iBAEI,MAAMjD,EAAQ,IAAIR,EAAanL,KAAKqJ,QAASrJ,KAAK8C,UAC5Cf,EAAM/B,KAAKoO,SACjBpO,KAAK8C,SAASgL,SAASxH,IACY,IAA3BA,EAAQ+C,QAAQnJ,OAChBoG,EAAQsD,OAAStD,EAAQ+C,QAAQ,IAGjC/C,EAAQsD,OAAS5J,KAAKwN,SAAS9B,OAAOpF,EAASqF,GAC3C3L,KAAKyN,gBACLnH,EAAQsD,OAAOoF,YAAY,SAE1BT,IACGhF,OAAOC,KAAK+E,MAAMC,QAAQxO,KAAMkN,EAAsBiC,cAAe7I,GACrEtG,KAAKyN,eAAec,EAAOjI,EAASvE,EAAI,KAIpDuE,EAAQsD,OAAOO,OAAOpI,EAAI,GAElC,E,iBC/tBJqN,EAAOC,QAAU,SAASC,EAAMhE,EAAGjE,GACjC,GAAIiE,IAAMjE,EAAG,OAAO,EAEpB,GAAIiE,GAAKjE,GAAiB,iBAALiE,GAA6B,iBAALjE,EAAe,CAC1D,GAAIiE,EAAE5L,cAAgB2H,EAAE3H,YAAa,OAAO,EAE5C,IAAIQ,EAAQzB,EAAG8Q,EACf,GAAI9M,MAAM+M,QAAQlE,GAAI,CAEpB,IADApL,EAASoL,EAAEpL,SACGmH,EAAEnH,OAAQ,OAAO,EAC/B,IAAKzB,EAAIyB,EAAgB,GAARzB,KACf,IAAK6Q,EAAMhE,EAAE7M,GAAI4I,EAAE5I,IAAK,OAAO,EACjC,OAAO,CACT,CAIA,GAAI6M,EAAE5L,cAAgB+P,OAAQ,OAAOnE,EAAEoE,SAAWrI,EAAEqI,QAAUpE,EAAEqE,QAAUtI,EAAEsI,MAC5E,GAAIrE,EAAEsE,UAAYtN,OAAOwG,UAAU8G,QAAS,OAAOtE,EAAEsE,YAAcvI,EAAEuI,UACrE,GAAItE,EAAEuE,WAAavN,OAAOwG,UAAU+G,SAAU,OAAOvE,EAAEuE,aAAexI,EAAEwI,WAIxE,IADA3P,GADAqP,EAAOjN,OAAOiN,KAAKjE,IACLpL,UACCoC,OAAOiN,KAAKlI,GAAGnH,OAAQ,OAAO,EAE7C,IAAKzB,EAAIyB,EAAgB,GAARzB,KACf,IAAK6D,OAAOwG,UAAUC,eAAeC,KAAK3B,EAAGkI,EAAK9Q,IAAK,OAAO,EAEhE,IAAKA,EAAIyB,EAAgB,GAARzB,KAAY,CAC3B,IAAIqR,EAAMP,EAAK9Q,GAEf,IAAK6Q,EAAMhE,EAAEwE,GAAMzI,EAAEyI,IAAO,OAAO,CACrC,CAEA,OAAO,CACT,CAGA,OAAOxE,GAAIA,GAAKjE,GAAIA,CACtB,C,meCtBI0I,GACAC,MAKAC,OAAS,CAAC,EAGVC,UAAY,GAGZC,WAAa,GAGbC,SAGAC,iBAAmB,KAGnBC,mBAAoB,EAExB,SAASC,WAAW3E,GAGhB,MAAO,CACH4E,KAAM,wMACNC,MAAO,EACPC,YAAa,EACbC,UAAW/E,EACXgF,YANQ,IAAK,6CAAUhF,GAAOiF,OAAO,IAOrCC,aAAc,EAEtB,CAEA,SAASC,oBAGL,OAAOR,WADOS,QAAQC,aAAa,eAAgB,WAEvD,CAEA,SAASC,wBAEL,MAAMC,EAASH,QAAQC,aAAa,aAAc,WAC5CG,GAAS,6CAAUD,GAAQN,OAAO,IACxC,MAAO,CACHL,KAAM,sCACNC,MAAO,EACPE,UAAWQ,EAAOtB,WAClBa,YAAa,EACbI,aAAc,EACdF,YAAaQ,EAAOvB,WACpBwB,cAAe,EAEvB,CAEA,SAASC,oBAEL,MAAO,CACH5F,OAAQ,UAAS,MAACzD,EAAK,SAAEqB,GAAWqC,GAChC,MAAMC,EAAQoF,QAAQC,aAAa,cAAe,WAC5CM,GAAiB,6CAAU3F,GAC3BgF,GAAc,6CAAUhF,GAAOiF,OAAO,IACtCW,EAAYD,EAAeE,WAAY,6CAAU7F,GAAOiF,OAAO,KAAM,6CAAUjF,GAAO8F,QAAQ,IAC9F7F,EAAMC,OAAOC,KAAK,sGAAsG6E,6BAAuChF,cACrK,OAAO,IAAIrC,OAAOC,KAAKwC,OAAO,CAC1B1C,WACA2C,KAAM,CACFC,IAAK,6BAA6BL,IAClCM,WAAY,IAAI5C,OAAOC,KAAK4C,KAAK,GAAI,KAEzCC,MAAO,CACHC,KAAMC,OAAOtE,GACb2D,MAAO4F,EAAU3B,WACjBrD,SAAU,OACVmF,WAAY,UAEhBjF,OAAQC,OAAOpD,OAAOC,KAAKwC,OAAOY,YAAc3E,GAExD,EAER,CAEA,SAAS2J,SAASC,EAAOC,GAEjB9B,OAAOrN,QAAQoP,KAAK,4CAA8CF,EAAQ,aAAeC,GAG7F,IAFA,IAAI/P,EAAMkO,OAAO4B,GACbG,EAAcjQ,EAAIiQ,YACbvT,EAAI,EAAGA,EAAIuT,EAAY9R,OAAQzB,IAChCA,GAAKqT,EACLE,EAAYvT,GAAGwT,SAEe,QAA1BD,EAAYvT,GAAGyT,UACXlC,OAAOrN,QAAQoP,KAAK,iCAAmCF,GAC3DM,WAAWH,EAAYvT,IACvBuT,EAAYvT,GAAGyT,QAAU,SAE7BF,EAAYvT,GAAG2T,KACXrQ,EACAiQ,EAAYvT,GAAGmL,QAI/B,CAEA,SAASyI,YAAYR,GAEb7B,OAAOrN,QAAQoP,KAAK,+CAAiDF,GAGzE,IAFA,IACIG,EADM/B,OAAO4B,GACKG,YACbvT,EAAI,EAAGA,EAAIuT,EAAY9R,OAAQzB,IACpCuT,EAAYvT,GAAGwT,OAEvB,CAEA,SAASK,QAAQC,EAASC,EAAQC,GAE1BzC,OAAOrN,QAAQoP,KAAK,sDAAwDS,GAChF,IAAIE,EAAe,GACfF,GAAUjJ,OAAOC,KAAKmJ,eAAeC,GACjCL,EAAQ,KACRG,EAAeG,cAAcN,EAAQ,KAGzC5P,QAAQmQ,KAAK,6CAA+CN,EAAS,qBAAuBC,EAAW7I,OAAON,UAGlH,IAAIyJ,EAAcN,EAAWO,aAC7BD,EAAcA,EAAYE,QAAQ,6BAA8BP,GAChED,EAAWS,WAAWH,EAC1B,CAEA,SAASF,cAAclS,GASnB,IANA,IAAIwS,EAAS,GACTC,EAAS,GACTC,EAAM,GACNC,EAAO,GACPC,GAAW,EAEN9U,EAAI,EAAGA,EAAIkC,EAAO6S,mBAAmBtT,OAAQzB,IAAK,CACvD,IAAID,EAAI+N,OAAO5L,EAAO6S,mBAAmB/U,GAAGgV,OAC9B,IAAVN,IAAuC,GAAvB3U,EAAEyK,QAAQ,WAC1BkK,EAASxS,EAAO6S,mBAAmB/U,GAAGiV,UACtCH,GAAW,IAEoB,GAA/B/U,EAAEyK,QAAQ,mBACVmK,EAASzS,EAAO6S,mBAAmB/U,GAAGiV,UACtCH,GAAW,IAEkB,GAA7B/U,EAAEyK,QAAQ,iBACVoK,EAAM1S,EAAO6S,mBAAmB/U,GAAGiV,UACnCH,GAAW,GAEH,IAARD,IAAwC,GAA1B9U,EAAEyK,QAAQ,cACxBqK,EAAO3S,EAAO6S,mBAAmB/U,GAAGiV,UACpCH,GAAW,EAEnB,CACA,OAAgB,GAAZA,EACOJ,EAAS,IAAMC,EAAS,QAAUC,EAAM,IAAMC,EAE9C3S,EAAOgT,iBAEtB,CAEA,SAASxB,WAAWM,GAEQ,MAApBpC,mBAEAA,iBAAmB,IAAI9G,OAAOC,KAAKoK,UAGvCvD,iBAAiB6B,QAAQ,CAAC,OAAUO,EAAW7I,OAAON,WAAW,SAASiJ,EAASC,GAC/EF,QAAQC,EAASC,EAAQC,EAC7B,GACJ,CAEA,SAASoB,gBAEL,IAAKvD,kBAAmB,CACpB,IAAIwD,EAAS9C,QAAQ+C,QAAQ,UACzBC,EAAS,GACG,MAAZ5D,WACA4D,EAAS,QAAU5D,UAEvB,IAAI6D,EAAU,GACRjD,QAAQkD,oBAEVD,EAAU,qBAEVjE,OAAOrN,QAAQoP,KAAK,uBAAmC,IAAViC,EAAe,cAAgBA,IAChF,IAAIG,EAAWpE,GAAGqE,WAAW,kFAAoFN,EAASG,EAAUD,EAAQ,CAAC,EAAGhE,OAEhJ,OADAM,mBAAoB,EACb6D,CACX,CACIE,gBAER,CAIO,SAASC,YAAYzC,EAAO0C,GAE3BvE,OAAOrN,QAAQoP,KAAK,kDAAoDF,GAC5E,IAAI9P,EAAMkO,OAAO4B,GACjB,GAAI9P,EAAK,CACL,IAAIsH,EAAUtH,EAAIsH,QACdmL,EAAIC,mBAAmBF,GAC3BlC,YAAYR,GACZ,IAAK,IAAIpT,EAAI,EAAGA,EAAI4K,EAAQnJ,OAAQzB,IAC5B4K,EAAQ5K,GAAG8V,OAASC,GAAU,WAALA,EACzBnL,EAAQ5K,GAAGiW,YAAW,GAEtBrL,EAAQ5K,GAAGiW,YAAW,EAGlC,CACJ,CAEA,SAASC,cAAcC,SAEnB,IAAI/C,MAAQ+C,QAAQzQ,GAEhB6L,OAAOrN,QAAQoP,KAAK,+BAAiCF,OACzD,IAAIgD,WAAa,CACbtR,KAAMuR,SAASF,QAAQrR,MACvBwR,OAAQ5E,WACR6E,aAAa,EACbC,UAAWC,KAAK,yBAA2BN,QAAQ7N,MACnDoO,mBAAmB,EACnBC,sBAAuB,CACnBC,MAAO9L,OAAOC,KAAK8L,oBAAoBC,cACvCC,WAAY,IAAI/S,MACZ8G,OAAOC,KAAKiM,UAAUC,QACtBnM,OAAOC,KAAKiM,UAAUE,UACtBpM,OAAOC,KAAKiM,UAAUG,OACtBrM,OAAOC,KAAKiM,UAAUI,UAG9BC,OAAQ,IAAIvM,OAAOC,KAAKC,OAAOmL,QAAQmB,UAAWnB,QAAQoB,WAC1DvU,QAAS,IAGTwU,YAAclG,GAAG,IAAM6E,QAAQzQ,IAAI+R,QAAQ,wBAC/CD,YAAYE,SAAS,WAGrB,IAAIpU,IAAM,IAAIwH,OAAOC,KAAK6E,IAAI+H,SAASC,eAAexE,OAAQgD,YAG9DtL,OAAOC,KAAK+E,MAAMS,YAAYjN,IAAK,SAAS,SAASwM,GACjDvO,KAAKsW,WAAW,CAACtB,aAAY,GACjC,IAGA,IAAI3L,QAAU,GACV2I,YAAc,GACduE,OAAS,CAAC,EACVC,YAAc,EAElB,QAA+B,IAApB5B,QAAQvL,QACf,IAAK,IAAI9J,EAAE,EAAGA,EAAIqV,QAAQvL,QAAQnJ,OAAQX,IAAK,CAE3C,IAAIqI,MAAQgN,QAAQvL,QAAQ9J,GACxBgV,MAAQ3M,MAAM2M,MAClB,GAAc,gBAAVA,MACIvE,OAAOrN,QAAQoP,KAAK,qCACxBwE,OAAOhC,OAASrD,6BACb,QAA6B,IAAlBqF,OAAOhC,OAAyB,CAG9C,IAAI3I,MAAQoF,QAAQC,aAAa,aAAeuF,cAAgB,IAAK,WACjExG,OAAOrN,QAAQoP,KAAK,qCAAuCwC,MAAQ,gBAAkB3I,OACzF2K,OAAOhC,OAAShE,WAAW3E,MAC/B,CAGA,IAAIhC,OAAS,IAAIL,OAAOC,KAAKwC,OAAO,CAChC1C,SAAU,IAAIC,OAAOC,KAAKC,OAAO7B,MAAMS,IAAKT,MAAMQ,KAClDrG,IAAKA,IACL0K,MAAO7E,MAAM6E,MACb8H,MAAOA,MACPtI,KAAMsK,OAAOhC,OACbxC,KAAMnK,MAAMmK,KACZxN,MAAOhF,EACPsS,MAAOA,MACPK,QAAStK,MAAMsK,UAInB7I,QAAQrI,KAAK4I,QAGb,IAAI6I,WAAa,IAAIlJ,OAAOC,KAAKiN,WAAW,CACxCC,QAAS9M,OAAOmI,KAChBnI,OAAQA,OACRsI,QAAStK,MAAMsK,QACf3N,MAAOhF,IAIXyS,YAAYhR,KAAKyR,YAEbzC,OAAOrN,QAAQoP,KAAK,qCAAuCxS,EAAI,cAAgBsS,OAIrE,gBAAV0C,OACA3K,OAAOoF,YAAY,SAAS,WACxB4C,SAAS5R,KAAK6R,MAAO7R,KAAKuE,MAC9B,GAER,CAIJ,IAAIxC,IAAM,CACN,GAAM8P,MACN,IAAO9P,IACP,QAAWsH,QACX,YAAe2I,aAEnB/B,OAAO4B,OAAS9P,GACpB,CAEO,SAAS4U,YAAY9E,EAAO+E,GAG/B,IAAI7U,EADAiO,OAAOrN,QAAQoP,KAAK,0CAA4CF,GAEpE,IACI9P,EAAMkO,OAAO4B,GAAO9P,GACxB,CAAE,MAAO8G,GAET,CAEA,IAAK9G,EACD,OAEJ,MAAM+D,EAAW8Q,EAAQ9Q,UAAY,GAC/BuD,EAAU,GACVwN,EAAkB,CAACxO,IAAK,KAAMD,IAAK,MACnC0O,EAAiB,CAACzO,IAAK,KAAMD,IAAK,MACxC,IAgBI2O,EAhBAC,EAAc,SAASnQ,GACvB,IAAIwB,EAAMxB,EAAY,GAClBuB,EAAMvB,EAAY,IACM,OAAxBgQ,EAAgBxO,KAAgBwO,EAAgBxO,IAAMA,KACtDwO,EAAgBxO,IAAMA,IAEE,OAAxBwO,EAAgBzO,KAAgByO,EAAgBzO,IAAMA,KACtDyO,EAAgBzO,IAAMA,IAEC,OAAvB0O,EAAezO,KAAgByO,EAAezO,IAAMA,KACpDyO,EAAezO,IAAMA,IAEE,OAAvByO,EAAe1O,KAAgB0O,EAAe1O,IAAMA,KACpD0O,EAAe1O,IAAMA,EAE7B,EAEA,IAAK,IAAI6O,KAAM/G,UACP+G,EAAG9S,KAAO0N,GAASoF,EAAG5N,SAAW4N,EAAG5N,QAAQnJ,OAAS,IACrD6W,EAAcE,GAGlBF,GACAC,EAAY,CAACjV,EAAIgI,YAAY3B,MAAOrG,EAAIgI,YAAY1B,QAExD,MAAM2J,EAAc,IAAI3D,IACxB,IAAK,IAAI5P,EAAI,EAAGA,EAAIqH,EAAS5F,OAAQzB,IAAK,CACtC,MAAMyY,EAAUpR,EAASrH,GACnBoI,EAAcqQ,EAAQnU,SAAS8D,YACrCmQ,EAAYnQ,GACZ,MAAMkL,EAAOmF,EAAQhR,WAAW6L,KAC1BnI,EAAS,IAAIL,OAAOC,KAAKwC,OAAO,CAClC1C,SAAU,IAAIC,OAAOC,KAAKC,OAAO5C,EAAY,GAAIA,EAAY,IAC7D9E,IAAKA,EACLkK,KAAM8E,oBACNrE,OAAQjO,IAEZ4K,EAAQrI,KAAK4I,GACb,MAAM6I,EAAa,IAAIlJ,OAAOC,KAAKiN,WAAW,CAC1CC,QAAS3E,EACTnI,OAAQA,EACR8C,OAAQjO,IAENqR,EAAMjJ,EAAYsQ,KAAK,KAC7B,GAAKnF,EAAYoF,IAAItH,GAEd,CACH,IAAIuH,EAAW5E,EAAWO,aAC1BqE,GAAYrF,EAAYsF,IAAIxH,GAAKkC,EAAYsF,IAAIxH,GAAK5P,OAAS,GAAG8S,aAClEP,EAAWS,WAAWmE,GACtBrF,EAAYsF,IAAIxH,GAAK9O,KAAKyR,EAC9B,MANIT,EAAYuF,IAAIzH,EAAK,CAAC2C,IAO1B7I,EAAOoF,YAAY,SAAS,SAAST,GAC7B0B,OAAO4B,GAAOY,YACdxC,OAAO4B,GAAOY,WAAWR,QAE7BQ,EAAWL,KAAKrQ,EAAK6H,GACrBqG,OAAO4B,GAAOY,WAAaA,CAC/B,GACJ,CACkB,IAAI,4DAAgB,CAACpJ,QAASA,EAAStH,IAAKA,EAAKyL,SAAU8D,sBAC7E,GAAIuF,EAAgBxO,IAAK,CACrB,MAAMsB,EAAS,IAAIJ,OAAOC,KAAKM,aAC/BH,EAAOtH,OAAOwU,GACdlN,EAAOtH,OAAOyU,GACd/U,EAAIsL,UAAU1D,EAClB,CACJ,CAEO,SAAS0K,iBAERrE,OAAOrN,QAAQoP,KAAK,mDAAqD7B,UAAUhQ,OAAS,UAC7F,IAAK,IAAIzB,EAAE,EAAGA,EAAIyR,UAAUhQ,OAAQzB,IAC9ByR,UAAUzR,GAAG+Y,iBACb7C,cAAczE,UAAUzR,GAGrC,CAEA,SAASgZ,QAAQlJ,GAGTyB,OAAQrN,QAAQ3E,IAAI,+BAAiCuQ,EAAMmJ,cAAcvT,IAG7E,IAFA,IAAIwT,EAAWpJ,EAAMmJ,cAEbjZ,EAAE,EAAGA,EAAEyR,UAAUhQ,OAAOzB,IACzByR,UAAUzR,GAAG0F,IAAMwT,EAAUxT,KAC5B+L,UAAUzR,GAAG+Y,iBAAgB,EAC7B7C,cAAczE,UAAUzR,IAGpC,CAIO,SAASmZ,KAAKC,EAAQC,GAEzB/H,GAAK8H,EACL7H,MAAQ8H,EAER1H,SAAWY,QAAQ+C,QAAQ,gBAEvB/D,QACArN,QAAQoP,KAAK,oBACG,MAAZ3B,SAEAzN,QAAQoP,KAAK,yBAA2Bf,QAAQ+C,QAAQ,iBAExDpR,QAAQoP,KAAK,0DAIrB,IAAIgG,EAAehI,GAAG,0BAGtB,GAFIC,OAAOrN,QAAQoP,KAAK,gDAAkDgG,EAAa7X,QAEnF6X,EAAa7X,OAAS,GAEN,MAAZkQ,SAAkB,CAElB,GAAI4H,cAAcC,0BAyBd,OAtBA9H,WAAaa,QAAQC,aAAa,YAAa,IAG/C8G,EAAaG,MAAK,WACd,IAAIC,EAAcpI,GAAG/P,MAErB,QAAuC,IAA5BmY,EAAYC,KAAK,OAAwB,CAChD,IAAIxD,EAAUuD,EAAYC,KAAK,OACT,iBAAZxD,IACNA,EAAUyD,KAAKC,MAAM1D,IAEzBA,EAAQzQ,GAAKgU,EAAYI,KAAK,MAC9B3D,EAAQ4C,gBAAkBxG,QAAQwH,gBAAgBL,EAAaV,SAC3DzH,OAAOrN,QAAQoP,KAAK,4BAA8B6C,EAAQzQ,IAC9D+L,UAAUlP,KAAK4T,GACTA,EAAQ4C,iBACVW,EAAYM,YAAY,cAEhC,CACJ,IAGO5E,gBAGH7D,OAAOrN,QAAQoP,KAAK,wEAGhC,CAER,C","sources":["webpack://mercury-template/./node_modules/kdbush/src/sort.js","webpack://mercury-template/./node_modules/kdbush/src/within.js","webpack://mercury-template/./node_modules/kdbush/src/index.js","webpack://mercury-template/./node_modules/kdbush/src/range.js","webpack://mercury-template/./node_modules/supercluster/index.js","webpack://mercury-template/./node_modules/@googlemaps/markerclusterer/dist/index.esm.js","webpack://mercury-template/./node_modules/fast-deep-equal/index.js","webpack://mercury-template/./template-src/js/map-google.js"],"sourcesContent":["\nexport default function sortKD(ids, coords, nodeSize, left, right, depth) {\n    if (right - left <= nodeSize) return;\n\n    const m = (left + right) >> 1;\n\n    select(ids, coords, m, left, right, depth % 2);\n\n    sortKD(ids, coords, nodeSize, left, m - 1, depth + 1);\n    sortKD(ids, coords, nodeSize, m + 1, right, depth + 1);\n}\n\nfunction select(ids, coords, k, left, right, inc) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            select(ids, coords, k, newLeft, newRight, inc);\n        }\n\n        const t = coords[2 * k + inc];\n        let i = left;\n        let j = right;\n\n        swapItem(ids, coords, left, k);\n        if (coords[2 * right + inc] > t) swapItem(ids, coords, left, right);\n\n        while (i < j) {\n            swapItem(ids, coords, i, j);\n            i++;\n            j--;\n            while (coords[2 * i + inc] < t) i++;\n            while (coords[2 * j + inc] > t) j--;\n        }\n\n        if (coords[2 * left + inc] === t) swapItem(ids, coords, left, j);\n        else {\n            j++;\n            swapItem(ids, coords, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swapItem(ids, coords, i, j) {\n    swap(ids, i, j);\n    swap(coords, 2 * i, 2 * j);\n    swap(coords, 2 * i + 1, 2 * j + 1);\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n","\nexport default function within(ids, coords, qx, qy, r, nodeSize) {\n    const stack = [0, ids.length - 1, 0];\n    const result = [];\n    const r2 = r * r;\n\n    while (stack.length) {\n        const axis = stack.pop();\n        const right = stack.pop();\n        const left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (let i = left; i <= right; i++) {\n                if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2) result.push(ids[i]);\n            }\n            continue;\n        }\n\n        const m = Math.floor((left + right) / 2);\n\n        const x = coords[2 * m];\n        const y = coords[2 * m + 1];\n\n        if (sqDist(x, y, qx, qy) <= r2) result.push(ids[m]);\n\n        const nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? qx - r <= x : qy - r <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? qx + r >= x : qy + r >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n\nfunction sqDist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n","\nimport sort from './sort';\nimport range from './range';\nimport within from './within';\n\nconst defaultGetX = p => p[0];\nconst defaultGetY = p => p[1];\n\nexport default class KDBush {\n    constructor(points, getX = defaultGetX, getY = defaultGetY, nodeSize = 64, ArrayType = Float64Array) {\n        this.nodeSize = nodeSize;\n        this.points = points;\n\n        const IndexArrayType = points.length < 65536 ? Uint16Array : Uint32Array;\n\n        const ids = this.ids = new IndexArrayType(points.length);\n        const coords = this.coords = new ArrayType(points.length * 2);\n\n        for (let i = 0; i < points.length; i++) {\n            ids[i] = i;\n            coords[2 * i] = getX(points[i]);\n            coords[2 * i + 1] = getY(points[i]);\n        }\n\n        sort(ids, coords, nodeSize, 0, ids.length - 1, 0);\n    }\n\n    range(minX, minY, maxX, maxY) {\n        return range(this.ids, this.coords, minX, minY, maxX, maxY, this.nodeSize);\n    }\n\n    within(x, y, r) {\n        return within(this.ids, this.coords, x, y, r, this.nodeSize);\n    }\n}\n","\nexport default function range(ids, coords, minX, minY, maxX, maxY, nodeSize) {\n    const stack = [0, ids.length - 1, 0];\n    const result = [];\n    let x, y;\n\n    while (stack.length) {\n        const axis = stack.pop();\n        const right = stack.pop();\n        const left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (let i = left; i <= right; i++) {\n                x = coords[2 * i];\n                y = coords[2 * i + 1];\n                if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[i]);\n            }\n            continue;\n        }\n\n        const m = Math.floor((left + right) / 2);\n\n        x = coords[2 * m];\n        y = coords[2 * m + 1];\n\n        if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[m]);\n\n        const nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? minX <= x : minY <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? maxX >= x : maxY >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n","\nimport KDBush from 'kdbush';\n\nconst defaultOptions = {\n    minZoom: 0,   // min zoom to generate clusters on\n    maxZoom: 16,  // max zoom level to cluster the points on\n    minPoints: 2, // minimum points to form a cluster\n    radius: 40,   // cluster radius in pixels\n    extent: 512,  // tile extent (radius is calculated relative to it)\n    nodeSize: 64, // size of the KD-tree leaf node, affects performance\n    log: false,   // whether to log timing info\n\n    // whether to generate numeric ids for input features (in vector tiles)\n    generateId: false,\n\n    // a reduce function for calculating custom cluster properties\n    reduce: null, // (accumulated, props) => { accumulated.sum += props.sum; }\n\n    // properties to use for individual points when running the reducer\n    map: props => props // props => ({sum: props.my_value})\n};\n\nconst fround = Math.fround || (tmp => ((x) => { tmp[0] = +x; return tmp[0]; }))(new Float32Array(1));\n\nexport default class Supercluster {\n    constructor(options) {\n        this.options = extend(Object.create(defaultOptions), options);\n        this.trees = new Array(this.options.maxZoom + 1);\n    }\n\n    load(points) {\n        const {log, minZoom, maxZoom, nodeSize} = this.options;\n\n        if (log) console.time('total time');\n\n        const timerId = `prepare ${  points.length  } points`;\n        if (log) console.time(timerId);\n\n        this.points = points;\n\n        // generate a cluster object for each point and index input points into a KD-tree\n        let clusters = [];\n        for (let i = 0; i < points.length; i++) {\n            if (!points[i].geometry) continue;\n            clusters.push(createPointCluster(points[i], i));\n        }\n        this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n        if (log) console.timeEnd(timerId);\n\n        // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n        // results in a cluster hierarchy across zoom levels\n        for (let z = maxZoom; z >= minZoom; z--) {\n            const now = +Date.now();\n\n            // create a new set of clusters for the zoom and index them with a KD-tree\n            clusters = this._cluster(clusters, z);\n            this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n            if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);\n        }\n\n        if (log) console.timeEnd('total time');\n\n        return this;\n    }\n\n    getClusters(bbox, zoom) {\n        let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n        const minLat = Math.max(-90, Math.min(90, bbox[1]));\n        let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n        const maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n        if (bbox[2] - bbox[0] >= 360) {\n            minLng = -180;\n            maxLng = 180;\n        } else if (minLng > maxLng) {\n            const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n            const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n            return easternHem.concat(westernHem);\n        }\n\n        const tree = this.trees[this._limitZoom(zoom)];\n        const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n        const clusters = [];\n        for (const id of ids) {\n            const c = tree.points[id];\n            clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n        }\n        return clusters;\n    }\n\n    getChildren(clusterId) {\n        const originId = this._getOriginId(clusterId);\n        const originZoom = this._getOriginZoom(clusterId);\n        const errorMsg = 'No cluster with the specified id.';\n\n        const index = this.trees[originZoom];\n        if (!index) throw new Error(errorMsg);\n\n        const origin = index.points[originId];\n        if (!origin) throw new Error(errorMsg);\n\n        const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n        const ids = index.within(origin.x, origin.y, r);\n        const children = [];\n        for (const id of ids) {\n            const c = index.points[id];\n            if (c.parentId === clusterId) {\n                children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n            }\n        }\n\n        if (children.length === 0) throw new Error(errorMsg);\n\n        return children;\n    }\n\n    getLeaves(clusterId, limit, offset) {\n        limit = limit || 10;\n        offset = offset || 0;\n\n        const leaves = [];\n        this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n        return leaves;\n    }\n\n    getTile(z, x, y) {\n        const tree = this.trees[this._limitZoom(z)];\n        const z2 = Math.pow(2, z);\n        const {extent, radius} = this.options;\n        const p = radius / extent;\n        const top = (y - p) / z2;\n        const bottom = (y + 1 + p) / z2;\n\n        const tile = {\n            features: []\n        };\n\n        this._addTileFeatures(\n            tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),\n            tree.points, x, y, z2, tile);\n\n        if (x === 0) {\n            this._addTileFeatures(\n                tree.range(1 - p / z2, top, 1, bottom),\n                tree.points, z2, y, z2, tile);\n        }\n        if (x === z2 - 1) {\n            this._addTileFeatures(\n                tree.range(0, top, p / z2, bottom),\n                tree.points, -1, y, z2, tile);\n        }\n\n        return tile.features.length ? tile : null;\n    }\n\n    getClusterExpansionZoom(clusterId) {\n        let expansionZoom = this._getOriginZoom(clusterId) - 1;\n        while (expansionZoom <= this.options.maxZoom) {\n            const children = this.getChildren(clusterId);\n            expansionZoom++;\n            if (children.length !== 1) break;\n            clusterId = children[0].properties.cluster_id;\n        }\n        return expansionZoom;\n    }\n\n    _appendLeaves(result, clusterId, limit, offset, skipped) {\n        const children = this.getChildren(clusterId);\n\n        for (const child of children) {\n            const props = child.properties;\n\n            if (props && props.cluster) {\n                if (skipped + props.point_count <= offset) {\n                    // skip the whole cluster\n                    skipped += props.point_count;\n                } else {\n                    // enter the cluster\n                    skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n                    // exit the cluster\n                }\n            } else if (skipped < offset) {\n                // skip a single point\n                skipped++;\n            } else {\n                // add a single point\n                result.push(child);\n            }\n            if (result.length === limit) break;\n        }\n\n        return skipped;\n    }\n\n    _addTileFeatures(ids, points, x, y, z2, tile) {\n        for (const i of ids) {\n            const c = points[i];\n            const isCluster = c.numPoints;\n\n            let tags, px, py;\n            if (isCluster) {\n                tags = getClusterProperties(c);\n                px = c.x;\n                py = c.y;\n            } else {\n                const p = this.points[c.index];\n                tags = p.properties;\n                px = lngX(p.geometry.coordinates[0]);\n                py = latY(p.geometry.coordinates[1]);\n            }\n\n            const f = {\n                type: 1,\n                geometry: [[\n                    Math.round(this.options.extent * (px * z2 - x)),\n                    Math.round(this.options.extent * (py * z2 - y))\n                ]],\n                tags\n            };\n\n            // assign id\n            let id;\n            if (isCluster) {\n                id = c.id;\n            } else if (this.options.generateId) {\n                // optionally generate id\n                id = c.index;\n            } else if (this.points[c.index].id) {\n                // keep id if already assigned\n                id = this.points[c.index].id;\n            }\n\n            if (id !== undefined) f.id = id;\n\n            tile.features.push(f);\n        }\n    }\n\n    _limitZoom(z) {\n        return Math.max(this.options.minZoom, Math.min(Math.floor(+z), this.options.maxZoom + 1));\n    }\n\n    _cluster(points, zoom) {\n        const clusters = [];\n        const {radius, extent, reduce, minPoints} = this.options;\n        const r = radius / (extent * Math.pow(2, zoom));\n\n        // loop through each point\n        for (let i = 0; i < points.length; i++) {\n            const p = points[i];\n            // if we've already visited the point at this zoom level, skip it\n            if (p.zoom <= zoom) continue;\n            p.zoom = zoom;\n\n            // find all nearby points\n            const tree = this.trees[zoom + 1];\n            const neighborIds = tree.within(p.x, p.y, r);\n\n            const numPointsOrigin = p.numPoints || 1;\n            let numPoints = numPointsOrigin;\n\n            // count the number of points in a potential cluster\n            for (const neighborId of neighborIds) {\n                const b = tree.points[neighborId];\n                // filter out neighbors that are already processed\n                if (b.zoom > zoom) numPoints += b.numPoints || 1;\n            }\n\n            // if there were neighbors to merge, and there are enough points to form a cluster\n            if (numPoints > numPointsOrigin && numPoints >= minPoints) {\n                let wx = p.x * numPointsOrigin;\n                let wy = p.y * numPointsOrigin;\n\n                let clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null;\n\n                // encode both zoom and point index on which the cluster originated -- offset by total length of features\n                const id = (i << 5) + (zoom + 1) + this.points.length;\n\n                for (const neighborId of neighborIds) {\n                    const b = tree.points[neighborId];\n\n                    if (b.zoom <= zoom) continue;\n                    b.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n                    const numPoints2 = b.numPoints || 1;\n                    wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center\n                    wy += b.y * numPoints2;\n\n                    b.parentId = id;\n\n                    if (reduce) {\n                        if (!clusterProperties) clusterProperties = this._map(p, true);\n                        reduce(clusterProperties, this._map(b));\n                    }\n                }\n\n                p.parentId = id;\n                clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n\n            } else { // left points as unclustered\n                clusters.push(p);\n\n                if (numPoints > 1) {\n                    for (const neighborId of neighborIds) {\n                        const b = tree.points[neighborId];\n                        if (b.zoom <= zoom) continue;\n                        b.zoom = zoom;\n                        clusters.push(b);\n                    }\n                }\n            }\n        }\n\n        return clusters;\n    }\n\n    // get index of the point from which the cluster originated\n    _getOriginId(clusterId) {\n        return (clusterId - this.points.length) >> 5;\n    }\n\n    // get zoom of the point from which the cluster originated\n    _getOriginZoom(clusterId) {\n        return (clusterId - this.points.length) % 32;\n    }\n\n    _map(point, clone) {\n        if (point.numPoints) {\n            return clone ? extend({}, point.properties) : point.properties;\n        }\n        const original = this.points[point.index].properties;\n        const result = this.options.map(original);\n        return clone && result === original ? extend({}, result) : result;\n    }\n}\n\nfunction createCluster(x, y, id, numPoints, properties) {\n    return {\n        x: fround(x), // weighted cluster center; round for consistency with Float32Array index\n        y: fround(y),\n        zoom: Infinity, // the last zoom the cluster was processed at\n        id, // encodes index of the first child of the cluster and its zoom level\n        parentId: -1, // parent cluster id\n        numPoints,\n        properties\n    };\n}\n\nfunction createPointCluster(p, id) {\n    const [x, y] = p.geometry.coordinates;\n    return {\n        x: fround(lngX(x)), // projected point coordinates\n        y: fround(latY(y)),\n        zoom: Infinity, // the last zoom the point was processed at\n        index: id, // index of the source feature in the original input array,\n        parentId: -1 // parent cluster id\n    };\n}\n\nfunction getClusterJSON(cluster) {\n    return {\n        type: 'Feature',\n        id: cluster.id,\n        properties: getClusterProperties(cluster),\n        geometry: {\n            type: 'Point',\n            coordinates: [xLng(cluster.x), yLat(cluster.y)]\n        }\n    };\n}\n\nfunction getClusterProperties(cluster) {\n    const count = cluster.numPoints;\n    const abbrev =\n        count >= 10000 ? `${Math.round(count / 1000)  }k` :\n        count >= 1000 ? `${Math.round(count / 100) / 10  }k` : count;\n    return extend(extend({}, cluster.properties), {\n        cluster: true,\n        cluster_id: cluster.id,\n        point_count: count,\n        point_count_abbreviated: abbrev\n    });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n    return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n    return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n    const y2 = (180 - y * 360) * Math.PI / 180;\n    return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend(dest, src) {\n    for (const id in src) dest[id] = src[id];\n    return dest;\n}\n\nfunction getX(p) {\n    return p.x;\n}\nfunction getY(p) {\n    return p.y;\n}\n","import equal from 'fast-deep-equal';\nimport SuperCluster from 'supercluster';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Cluster {\n    constructor({ markers, position }) {\n        this.markers = markers;\n        if (position) {\n            if (position instanceof google.maps.LatLng) {\n                this._position = position;\n            }\n            else {\n                this._position = new google.maps.LatLng(position);\n            }\n        }\n    }\n    get bounds() {\n        if (this.markers.length === 0 && !this._position) {\n            return undefined;\n        }\n        return this.markers.reduce((bounds, marker) => {\n            return bounds.extend(marker.getPosition());\n        }, new google.maps.LatLngBounds(this._position, this._position));\n    }\n    get position() {\n        return this._position || this.bounds.getCenter();\n    }\n    /**\n     * Get the count of **visible** markers.\n     */\n    get count() {\n        return this.markers.filter((m) => m.getVisible())\n            .length;\n    }\n    /**\n     * Add a marker to the cluster.\n     */\n    push(marker) {\n        this.markers.push(marker);\n    }\n    /**\n     * Cleanup references and remove marker from map.\n     */\n    delete() {\n        if (this.marker) {\n            this.marker.setMap(null);\n            delete this.marker;\n        }\n        this.markers.length = 0;\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst filterMarkersToPaddedViewport = (map, mapCanvasProjection, markers, viewportPadding) => {\n    const extendedMapBounds = extendBoundsToPaddedViewport(map.getBounds(), mapCanvasProjection, viewportPadding);\n    return markers.filter((marker) => extendedMapBounds.contains(marker.getPosition()));\n};\n/**\n * Extends a bounds by a number of pixels in each direction.\n */\nconst extendBoundsToPaddedViewport = (bounds, projection, pixels) => {\n    const { northEast, southWest } = latLngBoundsToPixelBounds(bounds, projection);\n    const extendedPixelBounds = extendPixelBounds({ northEast, southWest }, pixels);\n    return pixelBoundsToLatLngBounds(extendedPixelBounds, projection);\n};\n/**\n * @hidden\n */\nconst distanceBetweenPoints = (p1, p2) => {\n    const R = 6371; // Radius of the Earth in km\n    const dLat = ((p2.lat - p1.lat) * Math.PI) / 180;\n    const dLon = ((p2.lng - p1.lng) * Math.PI) / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos((p1.lat * Math.PI) / 180) *\n            Math.cos((p2.lat * Math.PI) / 180) *\n            Math.sin(dLon / 2) *\n            Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n};\n/**\n * @hidden\n */\nconst latLngBoundsToPixelBounds = (bounds, projection) => {\n    return {\n        northEast: projection.fromLatLngToDivPixel(bounds.getNorthEast()),\n        southWest: projection.fromLatLngToDivPixel(bounds.getSouthWest()),\n    };\n};\n/**\n * @hidden\n */\nconst extendPixelBounds = ({ northEast, southWest }, pixels) => {\n    northEast.x += pixels;\n    northEast.y -= pixels;\n    southWest.x -= pixels;\n    southWest.y += pixels;\n    return { northEast, southWest };\n};\n/**\n * @hidden\n */\nconst pixelBoundsToLatLngBounds = ({ northEast, southWest }, projection) => {\n    const bounds = new google.maps.LatLngBounds();\n    bounds.extend(projection.fromDivPixelToLatLng(northEast));\n    bounds.extend(projection.fromDivPixelToLatLng(southWest));\n    return bounds;\n};\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @hidden\n */\nclass AbstractAlgorithm {\n    constructor({ maxZoom = 16 }) {\n        this.maxZoom = maxZoom;\n    }\n    /**\n     * Helper function to bypass clustering based upon some map state such as\n     * zoom, number of markers, etc.\n     *\n     * ```typescript\n     *  cluster({markers, map}: AlgorithmInput): Cluster[] {\n     *    if (shouldBypassClustering(map)) {\n     *      return this.noop({markers, map})\n     *    }\n     * }\n     * ```\n     */\n    noop({ markers }) {\n        return noop(markers);\n    }\n}\n/**\n * Abstract viewport algorithm proves a class to filter markers by a padded\n * viewport. This is a common optimization.\n *\n * @hidden\n */\nclass AbstractViewportAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var { viewportPadding = 60 } = _a, options = __rest(_a, [\"viewportPadding\"]);\n        super(options);\n        this.viewportPadding = 60;\n        this.viewportPadding = viewportPadding;\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        if (map.getZoom() >= this.maxZoom) {\n            return {\n                clusters: this.noop({\n                    markers,\n                    map,\n                    mapCanvasProjection,\n                }),\n                changed: false,\n            };\n        }\n        return {\n            clusters: this.cluster({\n                markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n                map,\n                mapCanvasProjection,\n            }),\n        };\n    }\n}\n/**\n * @hidden\n */\nconst noop = (markers) => {\n    const clusters = markers.map((marker) => new Cluster({\n        position: marker.getPosition(),\n        markers: [marker],\n    }));\n    return clusters;\n};\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The default Grid algorithm historically used in Google Maps marker\n * clustering.\n *\n * The Grid algorithm does not implement caching and markers may flash as the\n * viewport changes. Instead use {@link SuperClusterAlgorithm}.\n */\nclass GridAlgorithm extends AbstractViewportAlgorithm {\n    constructor(_a) {\n        var { maxDistance = 40000, gridSize = 40 } = _a, options = __rest(_a, [\"maxDistance\", \"gridSize\"]);\n        super(options);\n        this.clusters = [];\n        this.maxDistance = maxDistance;\n        this.gridSize = gridSize;\n        this.state = { zoom: null };\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        const state = { zoom: map.getZoom() };\n        let changed = false;\n        if (this.state.zoom > this.maxZoom && state.zoom > this.maxZoom) ;\n        else {\n            changed = !equal(this.state, state);\n        }\n        this.state = state;\n        if (map.getZoom() >= this.maxZoom) {\n            return {\n                clusters: this.noop({\n                    markers,\n                    map,\n                    mapCanvasProjection,\n                }),\n                changed: changed,\n            };\n        }\n        return {\n            clusters: this.cluster({\n                markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n                map,\n                mapCanvasProjection,\n            }),\n        };\n    }\n    cluster({ markers, map, mapCanvasProjection, }) {\n        this.clusters = [];\n        markers.forEach((marker) => {\n            this.addToClosestCluster(marker, map, mapCanvasProjection);\n        });\n        return this.clusters;\n    }\n    addToClosestCluster(marker, map, projection) {\n        let maxDistance = this.maxDistance; // Some large number\n        let cluster = null;\n        for (let i = 0; i < this.clusters.length; i++) {\n            const candidate = this.clusters[i];\n            const distance = distanceBetweenPoints(candidate.bounds.getCenter().toJSON(), marker.getPosition().toJSON());\n            if (distance < maxDistance) {\n                maxDistance = distance;\n                cluster = candidate;\n            }\n        }\n        if (cluster &&\n            extendBoundsToPaddedViewport(cluster.bounds, projection, this.gridSize).contains(marker.getPosition())) {\n            cluster.push(marker);\n        }\n        else {\n            const cluster = new Cluster({ markers: [marker] });\n            this.clusters.push(cluster);\n        }\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Noop algorithm does not generate any clusters or filter markers by the an extended viewport.\n */\nclass NoopAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var options = __rest(_a, []);\n        super(options);\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        return {\n            clusters: this.cluster({ markers, map, mapCanvasProjection }),\n            changed: false,\n        };\n    }\n    cluster(input) {\n        return this.noop(input);\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A very fast JavaScript algorithm for geospatial point clustering using KD trees.\n *\n * @see https://www.npmjs.com/package/supercluster for more information on options.\n */\nclass SuperClusterAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var { maxZoom, radius = 60 } = _a, options = __rest(_a, [\"maxZoom\", \"radius\"]);\n        super({ maxZoom });\n        this.superCluster = new SuperCluster(Object.assign({ maxZoom: this.maxZoom, radius }, options));\n        this.state = { zoom: null };\n    }\n    calculate(input) {\n        let changed = false;\n        if (!equal(input.markers, this.markers)) {\n            changed = true;\n            // TODO use proxy to avoid copy?\n            this.markers = [...input.markers];\n            const points = this.markers.map((marker) => {\n                return {\n                    type: \"Feature\",\n                    geometry: {\n                        type: \"Point\",\n                        coordinates: [\n                            marker.getPosition().lng(),\n                            marker.getPosition().lat(),\n                        ],\n                    },\n                    properties: { marker },\n                };\n            });\n            this.superCluster.load(points);\n        }\n        const state = { zoom: input.map.getZoom() };\n        if (!changed) {\n            if (this.state.zoom > this.maxZoom && state.zoom > this.maxZoom) ;\n            else {\n                changed = changed || !equal(this.state, state);\n            }\n        }\n        this.state = state;\n        if (changed) {\n            this.clusters = this.cluster(input);\n        }\n        return { clusters: this.clusters, changed };\n    }\n    cluster({ map }) {\n        return this.superCluster\n            .getClusters([-180, -90, 180, 90], Math.round(map.getZoom()))\n            .map(this.transformCluster.bind(this));\n    }\n    transformCluster({ geometry: { coordinates: [lng, lat], }, properties, }) {\n        if (properties.cluster) {\n            return new Cluster({\n                markers: this.superCluster\n                    .getLeaves(properties.cluster_id, Infinity)\n                    .map((leaf) => leaf.properties.marker),\n                position: new google.maps.LatLng({ lat, lng }),\n            });\n        }\n        else {\n            const marker = properties.marker;\n            return new Cluster({\n                markers: [marker],\n                position: marker.getPosition(),\n            });\n        }\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides statistics on all clusters in the current render cycle for use in {@link Renderer.render}.\n */\nclass ClusterStats {\n    constructor(markers, clusters) {\n        this.markers = { sum: markers.length };\n        const clusterMarkerCounts = clusters.map((a) => a.count);\n        const clusterMarkerSum = clusterMarkerCounts.reduce((a, b) => a + b, 0);\n        this.clusters = {\n            count: clusters.length,\n            markers: {\n                mean: clusterMarkerSum / clusters.length,\n                sum: clusterMarkerSum,\n                min: Math.min(...clusterMarkerCounts),\n                max: Math.max(...clusterMarkerCounts),\n            },\n        };\n    }\n}\nclass DefaultRenderer {\n    /**\n     * The default render function for the library used by {@link MarkerClusterer}.\n     *\n     * Currently set to use the following:\n     *\n     * ```typescript\n     * // change color if this cluster has more markers than the mean cluster\n     * const color =\n     *   count > Math.max(10, stats.clusters.markers.mean)\n     *     ? \"#ff0000\"\n     *     : \"#0000ff\";\n     *\n     * // create svg url with fill color\n     * const svg = window.btoa(`\n     * <svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\">\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".1\" r=\"130\" />\n     * </svg>`);\n     *\n     * // create marker using svg icon\n     * return new google.maps.Marker({\n     *   position,\n     *   icon: {\n     *     url: `data:image/svg+xml;base64,${svg}`,\n     *     scaledSize: new google.maps.Size(45, 45),\n     *   },\n     *   label: {\n     *     text: String(count),\n     *     color: \"rgba(255,255,255,0.9)\",\n     *     fontSize: \"12px\",\n     *   },\n     *   // adjust zIndex to be above other markers\n     *   zIndex: 1000 + count,\n     * });\n     * ```\n     */\n    render({ count, position }, stats) {\n        // change color if this cluster has more markers than the mean cluster\n        const color = count > Math.max(10, stats.clusters.markers.mean) ? \"#ff0000\" : \"#0000ff\";\n        // create svg url with fill color\n        const svg = window.btoa(`\n  <svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\">\n    <circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n    <circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n    <circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n  </svg>`);\n        // create marker using svg icon\n        return new google.maps.Marker({\n            position,\n            icon: {\n                url: `data:image/svg+xml;base64,${svg}`,\n                scaledSize: new google.maps.Size(45, 45),\n            },\n            label: {\n                text: String(count),\n                color: \"rgba(255,255,255,0.9)\",\n                fontSize: \"12px\",\n            },\n            title: `Cluster of ${count} markers`,\n            // adjust zIndex to be above other markers\n            zIndex: Number(google.maps.Marker.MAX_ZINDEX) + count,\n        });\n    }\n}\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Extends an object's prototype by another's.\n *\n * @param type1 The Type to be extended.\n * @param type2 The Type to extend with.\n * @ignore\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extend(type1, type2) {\n    /* istanbul ignore next */\n    // eslint-disable-next-line prefer-const\n    for (let property in type2.prototype) {\n        type1.prototype[property] = type2.prototype[property];\n    }\n}\n/**\n * @ignore\n */\nclass OverlayViewSafe {\n    constructor() {\n        // MarkerClusterer implements google.maps.OverlayView interface. We use the\n        // extend function to extend MarkerClusterer with google.maps.OverlayView\n        // because it might not always be available when the code is defined so we\n        // look for it at the last possible moment. If it doesn't exist now then\n        // there is no point going ahead :)\n        extend(OverlayViewSafe, google.maps.OverlayView);\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar MarkerClustererEvents;\n(function (MarkerClustererEvents) {\n    MarkerClustererEvents[\"CLUSTERING_BEGIN\"] = \"clusteringbegin\";\n    MarkerClustererEvents[\"CLUSTERING_END\"] = \"clusteringend\";\n    MarkerClustererEvents[\"CLUSTER_CLICK\"] = \"click\";\n})(MarkerClustererEvents || (MarkerClustererEvents = {}));\nconst defaultOnClusterClickHandler = (_, cluster, map) => {\n    map.fitBounds(cluster.bounds);\n};\n/**\n * MarkerClusterer creates and manages per-zoom-level clusters for large amounts\n * of markers. See {@link MarkerClustererOptions} for more details.\n *\n */\nclass MarkerClusterer extends OverlayViewSafe {\n    constructor({ map, markers = [], algorithm = new SuperClusterAlgorithm({}), renderer = new DefaultRenderer(), onClusterClick = defaultOnClusterClickHandler, }) {\n        super();\n        this.markers = [...markers];\n        this.clusters = [];\n        this.algorithm = algorithm;\n        this.renderer = renderer;\n        this.onClusterClick = onClusterClick;\n        if (map) {\n            this.setMap(map);\n        }\n    }\n    addMarker(marker, noDraw) {\n        if (this.markers.includes(marker)) {\n            return;\n        }\n        this.markers.push(marker);\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    addMarkers(markers, noDraw) {\n        markers.forEach((marker) => {\n            this.addMarker(marker, true);\n        });\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    removeMarker(marker, noDraw) {\n        const index = this.markers.indexOf(marker);\n        if (index === -1) {\n            // Marker is not in our list of markers, so do nothing:\n            return false;\n        }\n        marker.setMap(null);\n        this.markers.splice(index, 1); // Remove the marker from the list of managed markers\n        if (!noDraw) {\n            this.render();\n        }\n        return true;\n    }\n    removeMarkers(markers, noDraw) {\n        let removed = false;\n        markers.forEach((marker) => {\n            removed = this.removeMarker(marker, true) || removed;\n        });\n        if (removed && !noDraw) {\n            this.render();\n        }\n        return removed;\n    }\n    clearMarkers(noDraw) {\n        this.markers.length = 0;\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    /**\n     * Recalculates and draws all the marker clusters.\n     */\n    render() {\n        const map = this.getMap();\n        if (map instanceof google.maps.Map && this.getProjection()) {\n            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_BEGIN, this);\n            const { clusters, changed } = this.algorithm.calculate({\n                markers: this.markers,\n                map,\n                mapCanvasProjection: this.getProjection(),\n            });\n            // allow algorithms to return flag on whether the clusters/markers have changed\n            if (changed || changed == undefined) {\n                // reset visibility of markers and clusters\n                this.reset();\n                // store new clusters\n                this.clusters = clusters;\n                this.renderClusters();\n            }\n            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_END, this);\n        }\n    }\n    onAdd() {\n        this.idleListener = this.getMap().addListener(\"idle\", this.render.bind(this));\n        this.render();\n    }\n    onRemove() {\n        google.maps.event.removeListener(this.idleListener);\n        this.reset();\n    }\n    reset() {\n        this.markers.forEach((marker) => marker.setMap(null));\n        this.clusters.forEach((cluster) => cluster.delete());\n        this.clusters = [];\n    }\n    renderClusters() {\n        // generate stats to pass to renderers\n        const stats = new ClusterStats(this.markers, this.clusters);\n        const map = this.getMap();\n        this.clusters.forEach((cluster) => {\n            if (cluster.markers.length === 1) {\n                cluster.marker = cluster.markers[0];\n            }\n            else {\n                cluster.marker = this.renderer.render(cluster, stats);\n                if (this.onClusterClick) {\n                    cluster.marker.addListener(\"click\", \n                    /* istanbul ignore next */\n                    (event) => {\n                        google.maps.event.trigger(this, MarkerClustererEvents.CLUSTER_CLICK, cluster);\n                        this.onClusterClick(event, cluster, map);\n                    });\n                }\n            }\n            cluster.marker.setMap(map);\n        });\n    }\n}\n\nexport { AbstractAlgorithm, AbstractViewportAlgorithm, Cluster, ClusterStats, DefaultRenderer, GridAlgorithm, MarkerClusterer, MarkerClustererEvents, NoopAlgorithm, SuperClusterAlgorithm, defaultOnClusterClickHandler, distanceBetweenPoints, extendBoundsToPaddedViewport, extendPixelBounds, filterMarkersToPaddedViewport, noop, pixelBoundsToLatLngBounds };\n//# sourceMappingURL=index.esm.js.map\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","/*\n * This program is part of the OpenCms Mercury Template.\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport tinycolor from 'tinycolor2';\nimport { MarkerClusterer } from \"@googlemaps/markerclusterer\";\n\n// the global objects that must be passed to this module\nvar jQ;\nvar DEBUG;\n\n\"use strict\";\n\n// all initialized Google maps\nvar m_maps = {};\n\n// all map data sets found on the page, as array for easy iteration\nvar m_mapData = [];\n\n// map styling\nvar m_mapStyle = [];\n\n// API key for accessing the map data\nvar m_apiKey;\n\n// the Google geocode object, used for resolving coordinates to address names\nvar m_googleGeocoder = null;\n\n// check if the API has already been loaded\nvar m_googleApiLoaded = false;\n\nfunction getPuempel(color) {\n\n    var shade = \"\" + tinycolor(color).darken(20);\n    return {\n        path: 'M0-37.06c-5.53 0-10 4.15-10 9.26 0 7.4 8 9.26 10 27.8 2-18.54 10-20.4 10-27.8 0-5.1-4.47-9.26-10-9.26zm.08 7a2.9 2.9 0 0 1 2.9 2.9 2.9 2.9 0 0 1-2.9 2.9 2.9 2.9 0 0 1-2.9-2.9 2.9 2.9 0 0 1 2.9-2.9z',\n        scale: 1,\n        fillOpacity: 1,\n        fillColor: color,\n        strokeColor: shade,\n        strokeWeight: 1\n    };\n}\n\nfunction getFeatureGraphic() {\n\n    const color = Mercury.getThemeJSON(\"map-color[0]\", \"#ffffff\");\n    return getPuempel(color);\n}\n\nfunction getCenterPointGraphic() {\n\n    const color1 = Mercury.getThemeJSON(\"map-center\", \"#000000\");\n    const color2 = tinycolor(color1).darken(20);\n    return {\n        path: \"M2,8a6,6 0 1,0 12,0a6,6 0 1,0 -12,0\",\n        scale: 1,\n        fillColor: color1.toString(),\n        fillOpacity: 1,\n        strokeWeight: 1,\n        strokeColor: color2.toString(),\n        strokeOpacity: 1\n    }\n}\n\nfunction getClusterGraphic() {\n\n    return {\n        render: function({count, position}, stats) {\n            const color = Mercury.getThemeJSON(\"map-cluster\", \"#999999\");\n            const perceivedColor = tinycolor(color);\n            const strokeColor = tinycolor(color).darken(20);\n            const textColor = perceivedColor.isLight() ? tinycolor(color).darken(70) : tinycolor(color).lighten(70);\n            const svg = window.btoa(`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 50 50\"><circle cx=\"25\" cy=\"25\" r=\"20\" stroke=\"${strokeColor}\" stroke-width=\"2\" fill=\"${color}\"/></svg>`);\n            return new google.maps.Marker({\n                position,\n                icon: {\n                    url: `data:image/svg+xml;base64,${svg}`,\n                    scaledSize: new google.maps.Size(60, 60)\n                },\n                label: {\n                    text: String(count),\n                    color: textColor.toString(),\n                    fontSize: \"14px\",\n                    fontWeight: \"normal\"\n                },\n                zIndex: Number(google.maps.Marker.MAX_ZINDEX) + count,\n            });\n        }\n    }\n}\n\nfunction showInfo(mapId, infoId) {\n\n    if (DEBUG) console.info(\"GoogleMap showInfo() called with map id: \" + mapId + \" info id: \" + infoId);\n    var map = m_maps[mapId];\n    var infoWindows = map.infoWindows;\n    for (var i = 0; i < infoWindows.length; i++) {\n        if (i != infoId) {\n            infoWindows[i].close();\n        } else {\n            if (infoWindows[i].geocode == \"true\") {\n                if (DEBUG) console.info(\"showInfo() geocode lookup for \" + mapId);\n                getGeocode(infoWindows[i]);\n                infoWindows[i].geocode = \"false\";\n            }\n            infoWindows[i].open(\n                map,\n                infoWindows[i].marker\n            );\n        }\n    }\n}\n\nfunction hideAllInfo(mapId) {\n\n    if (DEBUG) console.info(\"GoogleMap hideAllInfo() called with map id: \" + mapId);\n    var map = m_maps[mapId];\n    var infoWindows = map.infoWindows;\n    for (var i = 0; i < infoWindows.length; i++) {\n        infoWindows[i].close();\n    }\n}\n\nfunction setInfo(results, status, infoWindow) {\n\n    if (DEBUG) console.info(\"GoogleMap setInfo() geocode lookup returned status \" + status);\n    var addressFound = \"\";\n    if (status == google.maps.GeocoderStatus.OK) {\n        if (results[0]) {\n            addressFound = formatGeocode(results[0]);\n        }\n    } else {\n        console.warn(\"GoogleMap GeoCoder returned error status '\" + status + \"' for coordinates \" + infoWindow.marker.position);\n    }\n    // replace content in info window\n    var infoContent = infoWindow.getContent();\n    infoContent = infoContent.replace(\"<div class='geoAdr'></div>\", addressFound);\n    infoWindow.setContent(infoContent);\n}\n\nfunction formatGeocode(result) {\n\n    // returns the address from a geocode result in nicely formatted way\n    var street = \"\";\n    var strNum = \"\";\n    var zip = \"\";\n    var city = \"\";\n    var foundAdr = false;\n\n    for (var i = 0; i < result.address_components.length; i++) {\n        var t = String(result.address_components[i].types);\n        if (street == \"\" && t.indexOf(\"route\") != -1) {\n            street = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n        if (t.indexOf(\"street_number\") != -1) {\n            strNum = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n        if (t.indexOf(\"postal_code\") != -1) {\n            zip = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n        if (city == \"\" && t.indexOf(\"locality\") != -1) {\n            city = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n    }\n    if (foundAdr == true) {\n        return street + \" \" + strNum + \"<br/>\" + zip + \" \" + city;\n    } else {\n        return result.formatted_address;\n    }\n}\n\nfunction getGeocode(infoWindow) {\n\n    if (m_googleGeocoder == null) {\n        // initialize global geocoder object if required\n        m_googleGeocoder = new google.maps.Geocoder();\n    }\n\n    m_googleGeocoder.geocode({'latLng': infoWindow.marker.position}, function(results, status) {\n        setInfo(results, status, infoWindow);\n    });\n}\n\nfunction loadGoogleApi() {\n\n    if (!m_googleApiLoaded) {\n        var locale = Mercury.getInfo(\"locale\");\n        var mapKey = \"\"\n        if (m_apiKey != null) {\n            mapKey = \"&key=\" + m_apiKey;\n        }\n        var addLibs = \"\";\n        if (! Mercury.isOnlineProject()) {\n            // need to load places API for OpenCms map editor\n            addLibs = \"&libraries=places\"\n        }\n        if (DEBUG) console.info(\"GoogleMap API key: \" + (mapKey == '' ? '(undefined)' : mapKey));\n        let response = jQ.loadScript(\"https://maps.google.com/maps/api/js?callback=GoogleMap.initGoogleMaps&language=\" + locale + addLibs + mapKey, {}, DEBUG);\n        m_googleApiLoaded = true;\n        return response;\n    } else {\n        initGoogleMaps();\n    }\n}\n\n/****** Exported functions ******/\n\nexport function showMarkers(mapId, group) {\n\n    if (DEBUG) console.info(\"GoogleMap showMapMarkers() called with map id: \" + mapId);\n    var map = m_maps[mapId];\n    if (map) {\n        var markers = map.markers;\n        var g = decodeURIComponent(group);\n        hideAllInfo(mapId);\n        for (var i = 0; i < markers.length; i++) {\n            if (markers[i].group == g || g == 'showall') {\n                markers[i].setVisible(true);\n            } else {\n                markers[i].setVisible(false);\n            }\n        }\n    }\n}\n\nfunction showSingleMap(mapData){\n\n    var mapId = mapData.id;\n\n    if (DEBUG) console.info(\"GoogleMap initializing map: \" + mapId);\n    var mapOptions = {\n        zoom: parseInt(mapData.zoom),\n        styles: m_mapStyle,\n        scrollwheel: false,\n        mapTypeId: eval(\"google.maps.MapTypeId.\" + mapData.type),\n        streetViewControl: false,\n        mapTypeControlOptions: {\n            style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,\n            mapTypeIds: new Array(\n                google.maps.MapTypeId.ROADMAP,\n                google.maps.MapTypeId.SATELLITE,\n                google.maps.MapTypeId.HYBRID,\n                google.maps.MapTypeId.TERRAIN\n            )\n        },\n        center: new google.maps.LatLng(mapData.centerLat, mapData.centerLng),\n        maxZoom: 18\n    }\n\n    var $typeParent = jQ(\"#\" + mapData.id).closest(\"*[class*='type-map']\");\n    $typeParent.addClass(\"visible\");\n\n    // create the map\n    var map = new google.maps.Map(document.getElementById(mapId), mapOptions);\n\n    // enable mouse wheel scrolling after click\n    google.maps.event.addListener(map, 'click', function(event){\n        this.setOptions({scrollwheel:true});\n    });\n\n    // map markers and info windows\n    var markers = [];\n    var infoWindows = [];\n    var groups = {};\n    var groupsFound = 0;\n\n    if (typeof mapData.markers !== \"undefined\") {\n        for (var p=0; p < mapData.markers.length; p++) {\n\n            var point = mapData.markers[p];\n            var group = point.group;\n            if (group === \"centerpoint\") {\n                if (DEBUG) console.info(\"GoogleMap new center point added.\");\n                groups[group] = getCenterPointGraphic();\n            } else if (typeof groups[group] === \"undefined\" ) {\n                // Array? Object?\n                // see http://stackoverflow.com/questions/9526860/why-does-a-string-index-in-a-javascript-array-not-increase-the-length-size\n                var color = Mercury.getThemeJSON(\"map-color[\" + groupsFound++ + \"]\", \"#ffffff\");\n                if (DEBUG) console.info(\"GoogleMap new marker group added: \" + group + \" with color: \" + color);\n                groups[group] = getPuempel(color);\n            }\n\n            // get marker data from calling object\n            var marker = new google.maps.Marker({\n                position: new google.maps.LatLng(point.lat, point.lng),\n                map: map,\n                title: point.title,\n                group: group,\n                icon: groups[group],\n                info: point.info,\n                index: p,\n                mapId: mapId,\n                geocode: point.geocode\n            });\n\n            // add marker to marker map\n            markers.push(marker);\n\n            // initialize info window\n            var infoWindow = new google.maps.InfoWindow({\n                content: marker.info,\n                marker: marker,\n                geocode: point.geocode,\n                index: p\n            });\n\n            // add marker to marker map\n            infoWindows.push(infoWindow);\n\n            if (DEBUG) console.info(\"GoogleMap attaching Event lister: \" + p + \" to map id \" + mapId);\n\n            // attach event listener that shows info window to marker\n            // see http://you.arenot.me/2010/06/29/google-maps-api-v3-0-multiple-markers-multiple-infowindows/\n            if (group !== \"centerpoint\") {\n                marker.addListener('click', function() {\n                    showInfo(this.mapId, this.index);\n                });\n            }\n        }\n    }\n\n    // store map in global array, required e.g. to select marker groups etc.\n    var map = {\n        'id': mapId,\n        'map': map,\n        'markers': markers,\n        'infoWindows': infoWindows\n    };\n    m_maps[mapId] = map;\n}\n\nexport function showGeoJson(mapId, geoJson) {\n\n    if (DEBUG) console.info(\"Google update markers for map with id: \" + mapId);\n    let map;\n    try {\n        map = m_maps[mapId].map;\n    } catch (e) {\n        // map data may already be loaded but not the map\n    }\n\n    if (!map) { // no cookie consent yet\n        return;\n    }\n    const features = geoJson.features || [];\n    const markers = [];\n    const boundsNorthEast = {lat: null, lng: null};\n    const boundSouthWest = {lat: null, lng: null};\n    let checkBounds = function(coordinates) {\n        let lat = coordinates[1];\n        let lng = coordinates[0];\n        if (boundsNorthEast.lat === null || boundsNorthEast.lat < lat) {\n            boundsNorthEast.lat = lat;\n        }\n        if (boundsNorthEast.lng === null || boundsNorthEast.lng < lng) {\n            boundsNorthEast.lng = lng;\n        }\n        if (boundSouthWest.lat === null || boundSouthWest.lat > lat) {\n            boundSouthWest.lat = lat;\n        }\n        if (boundSouthWest.lng === null || boundSouthWest.lng > lng) {\n            boundSouthWest.lng = lng;\n        }\n    }\n    let centerPoint;\n    for (let md of m_mapData) {\n        if (md.id === mapId && md.markers && md.markers.length > 0) {\n            centerPoint = md;\n        }\n    }\n    if (centerPoint) {\n        checkBounds([map.getCenter().lng(), map.getCenter().lat()]); // bounding box includes the center point\n    }\n    const infoWindows = new Map();\n    for (let i = 0; i < features.length; i++) {\n        const feature = features[i];\n        const coordinates = feature.geometry.coordinates;\n        checkBounds(coordinates);\n        const info = feature.properties.info;\n        const marker = new google.maps.Marker({\n            position: new google.maps.LatLng(coordinates[1], coordinates[0]),\n            map: map,\n            icon: getFeatureGraphic(),\n            zIndex: i\n        });\n        markers.push(marker);\n        const infoWindow = new google.maps.InfoWindow({\n            content: info,\n            marker: marker,\n            zIndex: i\n        });\n        const key = coordinates.join(\",\");\n        if (!infoWindows.has(key)) {\n            infoWindows.set(key, [infoWindow]);\n        } else {\n            let contents = infoWindow.getContent();\n            contents += infoWindows.get(key)[infoWindows.get(key).length - 1].getContent();\n            infoWindow.setContent(contents);\n            infoWindows.get(key).push(infoWindow);\n        }\n        marker.addListener(\"click\", function(event) {\n            if (m_maps[mapId].infoWindow) {\n                m_maps[mapId].infoWindow.close();\n            }\n            infoWindow.open(map, marker);\n            m_maps[mapId].infoWindow = infoWindow;\n        });\n    }\n    const clusterer = new MarkerClusterer({markers: markers, map: map, renderer: getClusterGraphic()});\n    if (boundsNorthEast.lat) { // catch no center point and no features\n        const bounds = new google.maps.LatLngBounds();\n        bounds.extend(boundsNorthEast);\n        bounds.extend(boundSouthWest);\n        map.fitBounds(bounds);\n    }\n}\n\nexport function initGoogleMaps() {\n\n    if (DEBUG) console.info(\"GoogleMap initGoogleMaps() called with data for \" + m_mapData.length + \" maps!\" );\n       for (var i=0; i < m_mapData.length; i++) {\n         if(!m_mapData[i].showPlaceholder){\n             showSingleMap(m_mapData[i]);\n          }\n       }\n}\n\nfunction showMap(event){\n\n    // called by click on hidden map element in edit mode\n    if (DEBUG) {console.log(\"GoogleMap show map with id: \" + event.currentTarget.id);}\n    var mapToShow= event.currentTarget;\n\n    for(var i=0; i<m_mapData.length;i++){\n        if(m_mapData[i].id == mapToShow.id){\n            m_mapData[i].showPlaceholder=false;\n            showSingleMap(m_mapData[i]);\n        }\n    }\n}\n\n/****** Exported functions ******/\n\nexport function init(jQuery, debug) {\n\n    jQ = jQuery;\n    DEBUG = debug;\n\n    m_apiKey = Mercury.getInfo(\"googleApiKey\");\n\n    if (DEBUG) {\n        console.info(\"GoogleMap.init()\");\n        if (m_apiKey != null) {\n            // Goggle map key is read in mercury:pageinfo tag and read to JavaScript via Mercury.init()\n            console.info(\"GoogleMap API key is: \" + Mercury.getInfo(\"googleApiKey\"));\n        } else {\n            console.info(\"GoogleMap API key not set - Google maps not activated\");\n        }\n    }\n\n    var $mapElements = jQ('.map-google .mapwindow');\n    if (DEBUG) console.info(\"GoogleMap.init() .map-google elements found: \" + $mapElements.length);\n\n    if ($mapElements.length > 0) {\n\n        if (m_apiKey != null) {\n\n            if (PrivacyPolicy.cookiesAcceptedExternal()) {\n\n                // initialize map style from JSON stored in CSS\n                m_mapStyle = Mercury.getThemeJSON(\"map-style\", []);\n\n                // initialize map sections with values from data attributes\n                $mapElements.each(function(){\n                    var $mapElement = jQ(this);\n\n                    if (typeof $mapElement.data(\"map\") !== \"undefined\") {\n                        var mapData = $mapElement.data(\"map\");\n                        if(typeof mapData === \"string\") {\n                            mapData = JSON.parse(mapData);\n                        }\n                        mapData.id = $mapElement.attr(\"id\");\n                        mapData.showPlaceholder = Mercury.initPlaceholder($mapElement, showMap);\n                        if (DEBUG) console.info(\"GoogleMap found with id: \" + mapData.id);\n                        m_mapData.push(mapData);\n                        if (! mapData.showPlaceholder) {\n                            $mapElement.removeClass('placeholder');\n                        }\n                    }\n                });\n\n                // load the Google map API\n                return loadGoogleApi();\n\n            } else {\n                if (DEBUG) console.info(\"External cookies not accepted by the user - Google maps are disabled!\");\n            }\n\n        }\n    }\n}\n"],"names":["sortKD","ids","coords","nodeSize","left","right","depth","m","k","inc","n","z","Math","log","s","exp","sd","sqrt","max","floor","min","t","i","j","swapItem","swap","arr","tmp","sqDist","ax","ay","bx","by","dx","dy","defaultGetX","p","defaultGetY","KDBush","constructor","points","getX","getY","ArrayType","Float64Array","this","IndexArrayType","length","Uint16Array","Uint32Array","range","minX","minY","maxX","maxY","stack","result","x","y","axis","pop","push","nextAxis","within","r","qx","qy","r2","defaultOptions","minZoom","maxZoom","minPoints","radius","extent","generateId","reduce","map","props","fround","Float32Array","Supercluster","options","extend","Object","create","trees","Array","load","console","time","timerId","clusters","geometry","createPointCluster","timeEnd","now","Date","_cluster","getClusters","bbox","zoom","minLng","minLat","maxLng","maxLat","easternHem","westernHem","concat","tree","_limitZoom","lngX","latY","id","c","numPoints","getClusterJSON","index","getChildren","clusterId","originId","_getOriginId","originZoom","_getOriginZoom","errorMsg","Error","origin","pow","children","parentId","getLeaves","limit","offset","leaves","_appendLeaves","getTile","z2","top","bottom","tile","features","_addTileFeatures","getClusterExpansionZoom","expansionZoom","properties","cluster_id","skipped","child","cluster","point_count","isCluster","tags","px","py","getClusterProperties","coordinates","f","type","round","undefined","neighborIds","numPointsOrigin","neighborId","b","wx","wy","clusterProperties","_map","numPoints2","createCluster","point","clone","original","Infinity","yLat","count","abbrev","point_count_abbreviated","lng","lat","sin","PI","y2","atan","dest","src","__rest","e","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","propertyIsEnumerable","Cluster","markers","position","google","maps","LatLng","_position","bounds","marker","getPosition","LatLngBounds","getCenter","filter","getVisible","delete","setMap","AbstractAlgorithm","noop","SuperClusterAlgorithm","_a","super","superCluster","assign","state","calculate","input","changed","getZoom","transformCluster","bind","leaf","ClusterStats","sum","clusterMarkerCounts","a","clusterMarkerSum","mean","DefaultRenderer","render","stats","color","svg","window","btoa","Marker","icon","url","scaledSize","Size","label","text","String","fontSize","title","zIndex","Number","MAX_ZINDEX","OverlayViewSafe","type1","type2","property","OverlayView","MarkerClustererEvents","defaultOnClusterClickHandler","_","fitBounds","MarkerClusterer","algorithm","renderer","onClusterClick","addMarker","noDraw","includes","addMarkers","forEach","removeMarker","splice","removeMarkers","removed","clearMarkers","getMap","Map","getProjection","event","trigger","CLUSTERING_BEGIN","mapCanvasProjection","reset","renderClusters","CLUSTERING_END","onAdd","idleListener","addListener","onRemove","removeListener","CLUSTER_CLICK","module","exports","equal","keys","isArray","RegExp","source","flags","valueOf","toString","key","jQ","DEBUG","m_maps","m_mapData","m_mapStyle","m_apiKey","m_googleGeocoder","m_googleApiLoaded","getPuempel","path","scale","fillOpacity","fillColor","strokeColor","darken","strokeWeight","getFeatureGraphic","Mercury","getThemeJSON","getCenterPointGraphic","color1","color2","strokeOpacity","getClusterGraphic","perceivedColor","textColor","isLight","lighten","fontWeight","showInfo","mapId","infoId","info","infoWindows","close","geocode","getGeocode","open","hideAllInfo","setInfo","results","status","infoWindow","addressFound","GeocoderStatus","OK","formatGeocode","warn","infoContent","getContent","replace","setContent","street","strNum","zip","city","foundAdr","address_components","types","long_name","formatted_address","Geocoder","loadGoogleApi","locale","getInfo","mapKey","addLibs","isOnlineProject","response","loadScript","initGoogleMaps","showMarkers","group","g","decodeURIComponent","setVisible","showSingleMap","mapData","mapOptions","parseInt","styles","scrollwheel","mapTypeId","eval","streetViewControl","mapTypeControlOptions","style","MapTypeControlStyle","DROPDOWN_MENU","mapTypeIds","MapTypeId","ROADMAP","SATELLITE","HYBRID","TERRAIN","center","centerLat","centerLng","$typeParent","closest","addClass","document","getElementById","setOptions","groups","groupsFound","InfoWindow","content","showGeoJson","geoJson","boundsNorthEast","boundSouthWest","centerPoint","checkBounds","md","feature","join","has","contents","get","set","showPlaceholder","showMap","currentTarget","mapToShow","init","jQuery","debug","$mapElements","PrivacyPolicy","cookiesAcceptedExternal","each","$mapElement","data","JSON","parse","attr","initPlaceholder","removeClass"],"sourceRoot":""}